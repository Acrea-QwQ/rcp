[
  {
    "objectID": "week6/index.html#etc5513-title",
    "href": "week6/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reports using Quarto\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 6\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week6/index.html#open-frame",
    "href": "week6/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week6/index.html#recap",
    "href": "week6/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode"
  },
  {
    "objectID": "week6/index.html#aim",
    "href": "week6/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nLearn about git rebase\nLearn about git fetch and git merge\nLearn about staging and unstaging files\nHands-on practice\nIndustry talks"
  },
  {
    "objectID": "week6/index.html#rebase",
    "href": "week6/index.html#rebase",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase",
    "text": "Rebase\nIn git, there are two main ways to integrate changes from one branch into another:\n\ngit merge\ngit rebase"
  },
  {
    "objectID": "week6/index.html#merging-branches-using-git-merge",
    "href": "week6/index.html#merging-branches-using-git-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches using git merge",
    "text": "Merging branches using git merge\nIf we use git merge to combine diverging branches, we will have a non-linear history.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\nIn which situation can we merge branches and have a linear history?"
  },
  {
    "objectID": "week6/index.html#rebase-1",
    "href": "week6/index.html#rebase-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase",
    "text": "Rebase\nRebasing is the process of moving or combining a sequence of commits from a branch onto another branch.\n\nRebasing is most useful and easily visualised in the context of a feature branching workflow\nRebasing changes the base of your branch from one commit to another, making it appear as though you’d created your branch from a different commit.\n\n\n\n\n\n\n\nImportant\n\n\nRebasing moves an entire branch to another location in the repository\n\n\n\nIt can create a cleaner history if you don’t want merge lines everywhere."
  },
  {
    "objectID": "week6/index.html#rebase-in-practice",
    "href": "week6/index.html#rebase-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebase in practice",
    "text": "Rebase in practice\nAssume the following history exists and the current branch is feature:\n          E&lt;---F&lt;---G feature\n         /\n    A&lt;---B&lt;---C&lt;---D main\nIf we want to rebase the commits in the feature branch into the main branch, we need to do the following:\n\n\n\ngit checkout feature and\ngit rebase main\n\nor\n\ngit rebase main feature\n\n\n        feature    E'&lt;--F'&lt;--G' \n                  /\n A&lt;---B&lt;---C&lt;---D main\n\n\n\nwhich results in:\n   A&lt;---B&lt;---C&lt;---D&lt;---E'&lt;--F'&lt;--G' main"
  },
  {
    "objectID": "week6/index.html#rebasing-can-be-dangerous",
    "href": "week6/index.html#rebasing-can-be-dangerous",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rebasing can be dangerous",
    "text": "Rebasing can be dangerous"
  },
  {
    "objectID": "week6/index.html#git-rebase-and-merge",
    "href": "week6/index.html#git-rebase-and-merge",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git rebase and merge",
    "text": "Git rebase and merge\n\nMerging is a non-destructive operation. The existing branches are not changed in any way, and this avoids all the potential problems of rebasing.\nRebasing moves the entire feature branch to begin on the tip of the main branch, incorporating all of the new commits into main.\nRebasing rewrites the projecth istory by creating brand nwe commits for each commit in the original branch, giving a cleaner history\nHowever, this creates problems with safety and traceability\n\n\n\n\n\n\n\nGolden rule for rebase\n\n\nNever use it on public branches (such as main) in collaborative projects."
  },
  {
    "objectID": "week6/index.html#more-on-branching",
    "href": "week6/index.html#more-on-branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on branching",
    "text": "More on branching\nImagine that you are working on your local repository and a collaborator has created a new branch in your remote repo. You are currently working on your local repo and want to have a look at the new branch. That means that the local repo and your remote repo have diverged. That is, both the local and remote repositories are not currently synchronized.\n\nTo synchronize your work: git fetch origin\ngit fetch origin looks where origin is and fetches any data from it that you don’t yet have.\nIt also updates your local database repo, moving your origin/main pointer (HEAD) to its new, more up-to-date position. However, it does not move the HEAD of your local repository"
  },
  {
    "objectID": "week6/index.html#about-remotes",
    "href": "week6/index.html#about-remotes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "About remotes",
    "text": "About remotes\nNote: If a git repo contains more than one remote, then git fetch will fetch all the changes from all remotes.\nTo fetch only one, use git fetch origin (or whatever remote you are after)."
  },
  {
    "objectID": "week6/index.html#how-does-fetch-work",
    "href": "week6/index.html#how-does-fetch-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does fetch work?",
    "text": "How does fetch work?\n\ngit fetch downloaded the new B commit however our local working directory is not updated, and the head of our main branch is still pointing to commit A."
  },
  {
    "objectID": "week6/index.html#how-do-we-merge-those-branches",
    "href": "week6/index.html#how-do-we-merge-those-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How do we merge those branches?",
    "text": "How do we merge those branches?\nWe need to combined main branch with the remote tracking origin/main branch. How?\n\n\nBy merging!\n\n\nFirst, we need to move in the main branch and then merge origin/main\ngit checkout main\ngit merge origin/main\n\n\nIf the branches have not diverged, we can merge without conflict via a ‘fast merge’.\nIf the branches have diverged, we will need to resolve conflicts.\nYou can check the status of the local and remote branches by using git branch -vv"
  },
  {
    "objectID": "week6/index.html#very-useful-commands-for-fetching",
    "href": "week6/index.html#very-useful-commands-for-fetching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Very useful commands for fetching",
    "text": "Very useful commands for fetching\n\ngit remote lets you create, view, and delete connections to remote repositories.\ngit branch -vv allows you to check the status of your local and remote branches in relation to each other.\ngit fetch origin fetches the changes from remote origin\ngit branch -a lists all the branches available in the local repository + all the branches fetched from the remote.\n\n\n\n\n\n\n\nTip\n\n\nThe branches fetched from the remote origin would be preceded by remotes/origin/"
  },
  {
    "objectID": "week6/index.html#challenge-10-minutes",
    "href": "week6/index.html#challenge-10-minutes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Challenge: 10 minutes",
    "text": "Challenge: 10 minutes\nAs a team get organize to do the following:\n\nCreate a public repository that contains a README file.\nCreate a pull request where one of the team members suggest a modification of the README file.\nSuccessfully incorporate the pull request."
  },
  {
    "objectID": "week6/index.html#questions-and-drawing-challenge-5-minutes",
    "href": "week6/index.html#questions-and-drawing-challenge-5-minutes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Questions and drawing challenge: 5 minutes",
    "text": "Questions and drawing challenge: 5 minutes\n\nWhat is the Git command to merge the current branch with the branch called “Mybranch”?\nWhat is the Git command to delete the branch “Mybranch”?\nWhat is the Git command to get all the change history in the remote repository “origin”?\nGit pull is a combination of?\nDraw a situation where a conflict between different branches will arise?\nDraw a situation where a conflict between your local and your remote repository will arise?"
  },
  {
    "objectID": "week6/index.html#challenge-10-minutes-1",
    "href": "week6/index.html#challenge-10-minutes-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Challenge: 10 minutes",
    "text": "Challenge: 10 minutes\nAs a team get organised to do the following:\n\nOne of the members creates a public repository using the standard Rstudio Quarto template. After committing those changes to the remote repository, please invite the other members.\nEach team member creates an individual branch in which they will need to add a file name as studentname.R.\nMerge all the branches into the main branch.\nThe main branch should contain the README file and all the files that each of the team member has created.\n\n\n\n\n\nETC5513 Week 6"
  },
  {
    "objectID": "week4/index.html#etc5513-title",
    "href": "week4/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reporting using Quarto, git and GitHub\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 4\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week4/index.html#open-frame",
    "href": "week4/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week4/index.html#recap",
    "href": "week4/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nMotivation for version control\nGit\nIntroduction to command line\nGithub\nIntegration between Github and Rstudio\nWorkflow for using version control"
  },
  {
    "objectID": "week4/index.html#aim",
    "href": "week4/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\nLearning more on creating reproducible reports:\n\nReferencing\nQuarto books\nCSS files\n\nMore on Git:\n\nCreate and delete branches\nMerge branches\n\nSolving git conflicts:"
  },
  {
    "objectID": "week4/index.html#connecting-the-dots",
    "href": "week4/index.html#connecting-the-dots",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Connecting the dots",
    "text": "Connecting the dots\nSo far:\n\nLearned to create basic reproducible reports using R\nLearned how to connect our reproducible reports to Git and GitHub (version control)\n\n\nNext:\n\nNeed to learn how to make “professional reports” not only on html but also in pdf\nHow to collaborate on projects with other colleagues\nLearn how to solve issues on GitHub"
  },
  {
    "objectID": "week4/index.html#displaying-figures",
    "href": "week4/index.html#displaying-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Displaying figures",
    "text": "Displaying figures\nOptions inside the R code chunks:\n\nfig-align: Controls the alignment of figures in the report default, center, left, or right\nfig-cap: Captions. `fig-cap: “My amazing graph.”\nfig-height, fig-width: Size of the figure in inches\nheight, width: Size of your plot in the final file. For example width = \"50%\" which means half of the width of the image container (if the image is directly contained by a page instead of a child element of the page, that means half of the page width).\n\nMore on these controls here"
  },
  {
    "objectID": "week4/index.html#inserting-figures",
    "href": "week4/index.html#inserting-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inserting figures",
    "text": "Inserting figures\nUsing Markdown syntax:\n```{markdown}\n![Caption](path-to-image-here){fig-align=\"center\"}\n```\nUsing the knitr package:\n```{r}\n#| out-width: \"80%\"\n#| echo: false\nknitr::include_graphics(\"figs/insert_fig.png\")\n```"
  },
  {
    "objectID": "week4/index.html#setting-up-global-options-for-our-report",
    "href": "week4/index.html#setting-up-global-options-for-our-report",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Setting up global options for our report",
    "text": "Setting up global options for our report\nGlobal options are those that are applied to the entire document.\n\nBest is to add this R code chunk at the beginning of the document before the libraries R code chunk.\nThey can be overwritten by the individual R code chunk options!\nKnitr reference guide here"
  },
  {
    "objectID": "week4/index.html#quarto-and-referencing",
    "href": "week4/index.html#quarto-and-referencing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto and referencing",
    "text": "Quarto and referencing\nQuarto automatically includes referencing information that used to be part of the bookdown package. It’s one of the many advantages of moving to Quarto over RMarkdown.\nIf you’ve used Bookdown before, just note that you no longer need to swap output formats for references to work."
  },
  {
    "objectID": "week4/index.html#including-referencing-and-keeping-figures",
    "href": "week4/index.html#including-referencing-and-keeping-figures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Including referencing and keeping figures",
    "text": "Including referencing and keeping figures\n```{yaml}\ntitle: \"My Report\"\nauthor: \"Patricia Menéndez\"\noutput:\n  html: default    \n```\n\nInside a folder called filename_files, figures will saved in a subfolder called figure-html (or appropriate document type) be named using the R code chunk names ( remember to name your R code chunks!)\nAlternatively, we can add the following option into your YAML options:\n\n```{yaml}\nknitr:\n  opts_chunk: \n    fig.path: Images/\n```\nThis will create a new folder called Images and will place all the figures inside."
  },
  {
    "objectID": "week4/index.html#figure-referencing",
    "href": "week4/index.html#figure-referencing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figure referencing",
    "text": "Figure referencing\nTo reference figures, we have to include a label and a fig-cap. For example,\n```{r}\n#| label: fig-scatterplot\n#| fig-cap: \"Normalised mileage of cars. Positive values represent above average mileage, negative values indicate negative mileage\"\n#| eval: false\n\ndata(\"mtcars\")  # load data\nmtcars$`car name` &lt;- rownames(mtcars)  # create new column for car names\nmtcars$mpg_z &lt;- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg\nmtcars$mpg_type &lt;- ifelse(mtcars$mpg_z &lt; 0, \"below\", \"above\")  # above / below avg flag\nmtcars &lt;- mtcars[order(mtcars$mpg_z), ]  # sort\nmtcars$`car name` &lt;- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.\n\n# Diverging Barcharts\nggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + \n  geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +\n  scale_fill_manual(name=\"Mileage\", \n                    labels = c(\"Above Average\", \"Below Average\"), \n                    values = c(\"above\"=\"#00ba38\", \"below\"=\"#f8766d\")) + \n  labs(subtitle=\"Normalised mileage from 'mtcars'\", \n       title= \"Diverging Bars\", x=\"Normalised mileage\", y=\"Car Name\") + \n  coord_flip()\n```"
  },
  {
    "objectID": "week4/index.html#figure-referencing-1",
    "href": "week4/index.html#figure-referencing-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figure referencing",
    "text": "Figure referencing\n\n\n\n\n\n\n\n\n\n\nFigure 1: Normalised mileage of cars. Positive values represent above average mileage, negative values indicate negative mileage\n\n\n\n\n\n\nCode:\n@fig-scatterplot shows the normalised miles per gallon of a variety of makes of car.\nOutput:\nFigure 1 shows the normalised miles per gallon of a variety of makes of car."
  },
  {
    "objectID": "week4/index.html#referencing-a-table",
    "href": "week4/index.html#referencing-a-table",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\nCiting a table follows the same syntax:\n```{r}\n#| label: tbl-summarytable\n#| tbl-cap: Summary of the dataset\n\nkable(head(mtcars))\n```\n\n\n\n\nTable 1: Summary of the dataset\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\n\n\n\n\nCadillac Fleetwood\n10.4\n8\n472\n205\n\n\nLincoln Continental\n10.4\n8\n460\n215\n\n\nCamaro Z28\n13.3\n8\n350\n245\n\n\nDuster 360\n14.3\n8\n360\n245\n\n\nChrysler Imperial\n14.7\n8\n440\n230\n\n\nMaserati Bora\n15.0\n8\n301\n335"
  },
  {
    "objectID": "week4/index.html#referencing-a-table-1",
    "href": "week4/index.html#referencing-a-table-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\nIn text:\nWe can see the results in @tbl-summarytable\nOutput:\nWe can see the results in Table 1\n\n\n\n\n\n\nWarning\n\n\nIn order for a table to be cross-referenceable, it’s label must start with with tbl-."
  },
  {
    "objectID": "week4/index.html#referencing-a-table-2",
    "href": "week4/index.html#referencing-a-table-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a table",
    "text": "Referencing a table\n\nRemember to create a table we need to organize our data in a data frame or a tibble\nWe can use the kable function from the kableExtra package.\n\nNote that we don’t have to add the caption inside kable, we can use a chunk option. But the functional form will still work."
  },
  {
    "objectID": "week4/index.html#referencing-a-section",
    "href": "week4/index.html#referencing-a-section",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Referencing a section",
    "text": "Referencing a section\nTo reference a section, use @sec-label, and add the #sec- identifier to the heading. For example:\n## Introduction {#sec-introduction}\nwhich we would then reference with @sec-introduction.\nNote that for this to work, we need to set number-sections: true in the YAML, as sections are only referred to by numbers."
  },
  {
    "objectID": "week4/index.html#html-reports-templates",
    "href": "week4/index.html#html-reports-templates",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Html reports templates",
    "text": "Html reports templates\n\nTemplates can be modified by changing YAML options\nThere are lots of available Quqarto templates\nYAML can be further modify by using css files. More info here.\n\nLet’s have a look at an example."
  },
  {
    "objectID": "week4/index.html#recap-1",
    "href": "week4/index.html#recap-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\ngit clone is used to target an existing repository and create a clone, or copy of the target repository.\ngit pull is used to fetch and download content from a remote repository and immediately update the local repository to match that content.\ngit status displays the state of the working directory and the staging area\ngit add file_name adds a change in the working directory to the staging area\ngit commit -m \"Message\" (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin branch name is used to upload local repository content to a remote repository."
  },
  {
    "objectID": "week4/index.html#branching",
    "href": "week4/index.html#branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Branching",
    "text": "Branching\nEach repository has one default branch, and can have multiple other branches. Branching is a great feature of version control!\n\n\n\nIt allows you to duplicate your existing repository\nUse a branch to isolate development work without affecting other branches in the repository\nModification in a branch can be merged into your project.\n\n\n\n\n\n\n\n\n\nBranching is particularly important with Git as it is the mechanism that is used when you are collaborating with other researchers/data scientists."
  },
  {
    "objectID": "week4/index.html#head",
    "href": "week4/index.html#head",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "HEAD",
    "text": "HEAD\nHEAD is a pointer that Git uses to reference the current snapshot that we are looking at."
  },
  {
    "objectID": "week4/index.html#octocat",
    "href": "week4/index.html#octocat",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Octocat",
    "text": "Octocat"
  },
  {
    "objectID": "week4/index.html#creating-branches-from-github",
    "href": "week4/index.html#creating-branches-from-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches from GitHub",
    "text": "Creating branches from GitHub\nYou can create branches directly on GitHub. More info here"
  },
  {
    "objectID": "week4/index.html#creating-branches-on-github",
    "href": "week4/index.html#creating-branches-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches on GitHub",
    "text": "Creating branches on GitHub"
  },
  {
    "objectID": "week4/index.html#deleting-branches-from-github",
    "href": "week4/index.html#deleting-branches-from-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting branches from GitHub",
    "text": "Deleting branches from GitHub\nYou can also delete branches directly on GitHub"
  },
  {
    "objectID": "week4/index.html#cli",
    "href": "week4/index.html#cli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "CLI",
    "text": "CLI\n\nAs you get more comfortable with git, you might find this a bit slow and tedious.\nWe will be using our command line interface/Terminal or Git Bash to create and move across branches."
  },
  {
    "objectID": "week4/index.html#create-branches-using-the-terminalshellcli",
    "href": "week4/index.html#create-branches-using-the-terminalshellcli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Create branches using the Terminal/Shell/CLI",
    "text": "Create branches using the Terminal/Shell/CLI\nWe use the git branch and git checkout commands.\n\ngit branch show us the branches we have in our repo and marks our current branch with *\ngit branch newbranch_name creates a new branch but does not move the HEAD of the repo there.\ngit checkout newbranch_name moves the HEAD to newbranch_name"
  },
  {
    "objectID": "week4/index.html#git-head-and-checkout",
    "href": "week4/index.html#git-head-and-checkout",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git HEAD and checkout",
    "text": "Git HEAD and checkout\nHow does Git know what branch you’re currently on?\nBy using the pointer: HEAD. In Git, this is a pointer to the local branch you are currently on.\nInternally, the git checkout command updates the HEAD to point to either the specified branch or commit."
  },
  {
    "objectID": "week4/index.html#another-way-to-create-and-checkout-branches",
    "href": "week4/index.html#another-way-to-create-and-checkout-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Another way to create and checkout branches",
    "text": "Another way to create and checkout branches\nUsing the checkout command\n\ngit checkout -b newbranch_name creates a new branch and moves the repo HEAD to this branch\nYou can confirm it by using git branch to see in which branch you are currently in\nChecking out a branch updates the files in the working directory to match the version stored in that branch\nIt tells Git to record all new commits on that branch."
  },
  {
    "objectID": "week4/index.html#updating-those-new-branches-in-the-remote-repo-in-github",
    "href": "week4/index.html#updating-those-new-branches-in-the-remote-repo-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Updating those new branches in the remote repo in GitHub",
    "text": "Updating those new branches in the remote repo in GitHub\n\nWe can just update the newly created branch into GitHub with:\n\ngit push origin newbranch_name\nAlternatively if we had files or changes added into that branch: - git add . (adding all the modified files into the staging area) - git commit -m \"Updating new newbranch_name\" - git push origin newbranch_name"
  },
  {
    "objectID": "week4/index.html#merging-branches",
    "href": "week4/index.html#merging-branches",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches",
    "text": "Merging branches\n\ngit checkout main: First move to the branch we want to move content into\ngit merge newbranch_name -m \"Merging branches\"\ngit push origin main to update the remote repository\n\nRemember, we can use git status to check the status of our repo at any time."
  },
  {
    "objectID": "week4/index.html#check-out-before-creating-new-branch",
    "href": "week4/index.html#check-out-before-creating-new-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Check out before creating new branch",
    "text": "Check out before creating new branch\nIt is essential to git checkout before creating a new branch.\nIf the branch where you are currently working was already merged with the main branch you’ll need to undo almost all the changes from the old branch that did not make it into the main branch.\nReason: all the old changes from that branch will appear as new changes in combination with the changes that are actually new.\nIt is fixable but a mess that you want to avoid!\n\n\n\n\n\n\nCaution\n\n\nDon’t create branches from a branch that is not the main branch unless you are deliberately doing it"
  },
  {
    "objectID": "week4/index.html#deleting-branches-using-cli-1",
    "href": "week4/index.html#deleting-branches-using-cli-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting branches using CLI",
    "text": "Deleting branches using CLI\nTo delete a branch from your remote repository (GitHub):\ngit push origin --delete Name_of_branch"
  },
  {
    "objectID": "week4/index.html#more-on-branching",
    "href": "week4/index.html#more-on-branching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More on Branching",
    "text": "More on Branching\nImagine that you are working on your local repository and a collaborator has created a new branch in your remote repo.\nYou are currently working on your local repo and want to have a look at the new branch. That means that the local repo and your remote repo have diverged.\nThat is, both the local and remote repositories are not currently synchronized.\n\nTo synchronize your work: git fetch origin\ngit fetch origin looks where origin is and fetches any data from it that you don’t yet have.\nIt also updates your local database repo (if it can), moving your origin/main pointer (HEAD) to its new, more up-to-date position."
  },
  {
    "objectID": "week4/index.html#about-remotes",
    "href": "week4/index.html#about-remotes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "About remotes",
    "text": "About remotes\nNote: If the git repo contains more than one remote, such as origin and upstream, git fetch will fetch all the changes from all of the remotes.\ngit fetch origin will only fetch the changes from remote origin"
  },
  {
    "objectID": "week4/index.html#fetch-workflow",
    "href": "week4/index.html#fetch-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Fetch workflow",
    "text": "Fetch workflow\n\ngit fetch updates all remote branches\nGood practice to check branches available for checkout\nMake a local working copy of the branch\n\nWorkflow\n\ngit remote (The git remote command lets you create, view, and delete connections to remote repositories.)\ngit fetch origin: fetch the changes from remote origin (Fetching is what you do when you want to see what everybody else has been working on in the remote repo)\ngit branch -a shows all the branches available in the local repository + all the branches fetched from the remote.\n\nThe branches fetched from the remote origin would be preceded by remotes/origin/"
  },
  {
    "objectID": "week4/index.html#etiquette-for-working-on-someone-else-branch",
    "href": "week4/index.html#etiquette-for-working-on-someone-else-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Etiquette for working on someone else branch",
    "text": "Etiquette for working on someone else branch\n\nTo work on someone’s branch, make a local copy of it\nWork on your local branch (new branch)\nThen push that new branch to the remote repository\n\nTo do that: - First make sure you are working in that branch in your local repo: git branch -a - Add changes into the staging area, commit and push changes to the corresponding branch into the remote repository: git add files, git commit -m \"Message\", git push origin name-of-the-branch"
  },
  {
    "objectID": "week4/index.html#how-to-go-back-to-your-previous-branch",
    "href": "week4/index.html#how-to-go-back-to-your-previous-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How to go back to your previous branch?",
    "text": "How to go back to your previous branch?\n\ngit checkout branchname\n\nImagine that you have two branches:\n\nmain\nAlternative_analysis\n\nTo check in which branch you are currently\n\ngit branch or git branch -a, you will see an * to let you in which branch the HEAD of your repository currently is.\n\nTo go back to main branch (assuming that you were in there): git checkout main"
  },
  {
    "objectID": "week4/index.html#merging-branches-sucessfully",
    "href": "week4/index.html#merging-branches-sucessfully",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches sucessfully",
    "text": "Merging branches sucessfully\nSuppose we have two branches: main and new_development and our goal is to bring changes from the branch new_development into our main branch:\n\nFor merging, go to main branch: git checkout main\ngit merge new_development\ngit push origin main\nThis will incorporate the changes made in the branch new_development into the main branch.\n\nIf those steps are successful your new_development branch will be fully integrated within the main branch."
  },
  {
    "objectID": "week4/index.html#merging-branches-with-conflicts",
    "href": "week4/index.html#merging-branches-with-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches with conflicts",
    "text": "Merging branches with conflicts\nHowever, it is possible that Git will not be able to automatically resolve some conflicts,\n# Auto-merging index.html\n# CONFLICT (content): Merge conflict in index.html\n# Automatic merge failed; fix conflicts and then commit the result.\n\n\n\n\n\n\nImportant\n\n\nDo not panic.\n\n\n\nNo-one likes merge conflicts but they happen, and are fixable."
  },
  {
    "objectID": "week4/index.html#you-will-need-to-resolve-the-conflicts",
    "href": "week4/index.html#you-will-need-to-resolve-the-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "You will need to resolve the conflicts",
    "text": "You will need to resolve the conflicts\nYou will have to resolve them manually.\nThis normally happens when two branches have the same file but with two different versions of the file. In that case Git is not able to figure out which version to use and is asking you to resolve the conflict."
  },
  {
    "objectID": "week4/index.html#resolving-merging-conflicts",
    "href": "week4/index.html#resolving-merging-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving merging conflicts",
    "text": "Resolving merging conflicts\nFirst, figure out which files are affected by the conflict:\n\ngit status\ngit status\n# On branch main\n# You have unmerged paths.\n#   (fix conflicts and run \"git commit\")\n# \n# Unmerged paths:\n#   (use \"git add &lt;file&gt;...\" to mark resolution)\n# \n#     both modified:      example.Rmd\n# \n# no changes added to commit (use \"git add\" and/or \"git commit -a\")"
  },
  {
    "objectID": "week4/index.html#resolving-the-conflict",
    "href": "week4/index.html#resolving-the-conflict",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving the conflict",
    "text": "Resolving the conflict\n\nOpen the file with a text editor\nGo to the lines which are marked with\n\n&lt;&lt;&lt;&lt;&lt;&lt;, ====== , and &gt;&gt;&gt;&gt;&gt;&gt;\nEdit the file\n\ngit add filename\ngit commit -m \"Message\"\ngit push origin main"
  },
  {
    "objectID": "week4/index.html#resolving-conflicts",
    "href": "week4/index.html#resolving-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts\nWhen you open the conflict file in a text editor such as Rstudio, you will see the conflicted part marked like this:\n/* code unaffected by conflict */\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n/* code from main that caused conflict */\n=======\n/* code from feature that caused conflict */\n&gt;&gt;&gt;&gt;&gt;&gt;\nWhen Git encounters a conflict, it adds &lt;&lt;&lt;&lt; ; &gt;&gt;&gt;&gt; and ======= to highlight the parts that caused the conflict and need to be resolved."
  },
  {
    "objectID": "week4/index.html#resolving-conflicts-in-practice",
    "href": "week4/index.html#resolving-conflicts-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts in practice",
    "text": "Resolving conflicts in practice\n\nOpen the file in a text editor (for example Rstudio)\nDecide which part of the code you need to keep in the final main branch\nRemove the irrelevant code and the conflict indicators\nRun git add to stage the file/s and git commit to commit the changes: this will generate the merge commit."
  },
  {
    "objectID": "week4/index.html#resolving-the-conflict-1",
    "href": "week4/index.html#resolving-the-conflict-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving the conflict",
    "text": "Resolving the conflict"
  },
  {
    "objectID": "week4/index.html#merging-branches-1",
    "href": "week4/index.html#merging-branches-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Merging branches",
    "text": "Merging branches"
  },
  {
    "objectID": "week4/index.html#creating-branches-from-rstudio",
    "href": "week4/index.html#creating-branches-from-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating branches from Rstudio",
    "text": "Creating branches from Rstudio\n\n\n\n\n\n\n\nImportant\n\n\nWhen we create a branch using Rstudio the branch is created both in the local and in the remote repository (at the same time.)"
  },
  {
    "objectID": "week4/index.html#keep-refreshing-rstudio-cloud",
    "href": "week4/index.html#keep-refreshing-rstudio-cloud",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Keep refreshing Rstudio (Cloud)",
    "text": "Keep refreshing Rstudio (Cloud)\nOtherwise some of your branches and changes might not be updated."
  },
  {
    "objectID": "week4/index.html#diff-window-in-rstudio",
    "href": "week4/index.html#diff-window-in-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Diff window in Rstudio",
    "text": "Diff window in Rstudio"
  },
  {
    "objectID": "week4/index.html#rstudio-demo",
    "href": "week4/index.html#rstudio-demo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio Demo",
    "text": "Rstudio Demo"
  },
  {
    "objectID": "week4/index.html#few-things-to-start-getting-installed",
    "href": "week4/index.html#few-things-to-start-getting-installed",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Few things to start getting installed",
    "text": "Few things to start getting installed\nPlease follow the link and get the Github Education pack.\nFrom now on we will be using VSCode for managing git. Please look at instructions in Week 3 to get it installed."
  },
  {
    "objectID": "week4/index.html#time-to-start-our-programs-locally",
    "href": "week4/index.html#time-to-start-our-programs-locally",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Time to start our programs locally!",
    "text": "Time to start our programs locally!\nAfter your tutorial this week:\nIn the next weeks, we will be using VSCode\n\nTo help us resolve conflicts\nTo have a nicer way for visualizing Git trees + much more!"
  },
  {
    "objectID": "week4/index.html#dont-forget-about-assignment-1",
    "href": "week4/index.html#dont-forget-about-assignment-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Don’t forget about Assignment 1!",
    "text": "Don’t forget about Assignment 1!\n\nFor this first assignment your repository can be private. However, when you submit your assignment make sure you make it public.\nThink that you will be able to show case this assignment on your GitHub account so that you can start building your projects portfolio.\nPlease come to any of the consultation hours if you have any questions."
  },
  {
    "objectID": "week4/index.html#week-4-lesson",
    "href": "week4/index.html#week-4-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 4 Lesson",
    "text": "Week 4 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nLearned more on creating reproducible reports:\n\nReferencing\nTalk about css files\n\nMore on Git:\n\nBranches\n\nSolving Git merging conflicts\nInstall VSCode as a GUI to work with Git/GitHub and as a text editor for commits.\n\n\n\n\n\n\n\n\nETC5513 Week 4"
  },
  {
    "objectID": "week2/index.html#etc5513-title",
    "href": "week2/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nReproducible reports using Quarto\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 2\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week2/index.html#open-frame",
    "href": "week2/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week2/index.html#recap",
    "href": "week2/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nSet the basis for the unit\nUnit structure\nAssessment\nIntroduction to reproducibility\nLooked at R, RStudio and git\n\n\nIn the tutorial, you got to know more about R, and some of the available R and RStudio resources to help you through the semester.\n\n\nYou were also introduced to ChatGPT that you can use to assist in your learning. We will be using ChatGPT ethically as per the University guidelines."
  },
  {
    "objectID": "week2/index.html#aim",
    "href": "week2/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nQuarto documents\nR Code Chunk Options\nIncluding images and figures\nComputer file architecture\nRStudio Projects\nGood coding practices\n\n\n\n\nSecond hour: hands on practice"
  },
  {
    "objectID": "week2/index.html#think-of-reproducible-reporting-as-a-project",
    "href": "week2/index.html#think-of-reproducible-reporting-as-a-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Think of reproducible reporting as a project",
    "text": "Think of reproducible reporting as a project\nThe project needs to contain all the resources needed to produce a reproducible output.\n\n\n\n\n\n\nDefinition: Computational Reproducibility\n\n\nObtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis."
  },
  {
    "objectID": "week2/index.html#elements-of-a-reproducible-project",
    "href": "week2/index.html#elements-of-a-reproducible-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Elements of a reproducible project",
    "text": "Elements of a reproducible project\nWe need to have a plan to organise, store and make all the project files available\n\nAll the elements of the project should be files\nAll files should be stored within the project location (typically a folder)\nAll your files should be explicitly tied together"
  },
  {
    "objectID": "week2/index.html#project-organisation-example",
    "href": "week2/index.html#project-organisation-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project organisation example",
    "text": "Project organisation example"
  },
  {
    "objectID": "week2/index.html#workflow-for-reproducible-research",
    "href": "week2/index.html#workflow-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Workflow for reproducible research",
    "text": "Workflow for reproducible research\n\n\n\n\n\n\n\nAllison Horst (@allisonhorst)"
  },
  {
    "objectID": "week2/index.html#stages-for-reproducible-data-analysis-and-reporting",
    "href": "week2/index.html#stages-for-reproducible-data-analysis-and-reporting",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stages for reproducible data analysis and reporting",
    "text": "Stages for reproducible data analysis and reporting\n\n\nClear research questions to be investigated\nClear objectives: what is the goal of this report?\nData gathering\nExploratory data analysis\nData analysis\nResults presentation\n\n\n\n\nAll of the above needs to be documented and tied together"
  },
  {
    "objectID": "week2/index.html#in-this-unit",
    "href": "week2/index.html#in-this-unit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In this unit",
    "text": "In this unit\nWe will create documents that are reproducible\n\nIncorporate analyses that are reproducible\nInclude report text\nAll combined together\n\nOur reproducible documents will be created using the scripting language R combined with quarto."
  },
  {
    "objectID": "week2/index.html#what-is-markdown",
    "href": "week2/index.html#what-is-markdown",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain text documents.\nIt was created by John Gruber in 2004. Read more here\n\nMarkdown is a “text” formatting syntax\nCan be rendered to more complex formats such as pdf, html, pdf, doc, …"
  },
  {
    "objectID": "week2/index.html#main-tools-for-combining-r-code-and-text",
    "href": "week2/index.html#main-tools-for-combining-r-code-and-text",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Main tools for combining R code and text",
    "text": "Main tools for combining R code and text\nOur main tool is going to be R and it’s packages. We will be using R via RStudio.\n\nR is structured into libraries\nFor reproducibility, we have two libraries that are crucial\nDoes anyone know which ones are those?"
  },
  {
    "objectID": "week2/index.html#quarto-documents",
    "href": "week2/index.html#quarto-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto documents",
    "text": "Quarto documents\n\nQuarto could be considered a file format, for making dynamic documents with R.\nQuarto documents have extension qmd"
  },
  {
    "objectID": "week2/index.html#quarto",
    "href": "week2/index.html#quarto",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\n\n\nQuarto\n\n\n\nProvides an environment where you can write your complete analysis, and combines your text and code together into a rich document\nYou write your code as code chunks, put your text around that, and then you get a fully reproducible document"
  },
  {
    "objectID": "week2/index.html#elements-in-a-quarto-document",
    "href": "week2/index.html#elements-in-a-quarto-document",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Elements in a Quarto Document",
    "text": "Elements in a Quarto Document\nThere are three parts to a Quarto document\n\nMetadata (YAML)\nText (formatted with Markdown)\nCode (code formatting)\n\n\nBefore we dive into the Quarto file structure, let’s talk about Markdown."
  },
  {
    "objectID": "week2/index.html#dynamic-documents",
    "href": "week2/index.html#dynamic-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Dynamic documents",
    "text": "Dynamic documents\nQuarto + knitr = Dynamic document\n\nQuarto allows us to not only use Markdown to write the text in the report, it also allows us to include R code.\nknitr combines with pandoc to render documents that contain a mixture of these components\npandoc is used by the quarto package to render a qmd file into a new format.\n\n\n\nPandoc is a universal document converter.\nIt takes Markdown, word documents, powerpoint slides, LaTeX and a bunch of other documents and converts between them. You can read more about Pandoc here."
  },
  {
    "objectID": "week2/index.html#possible-outputs",
    "href": "week2/index.html#possible-outputs",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Possible outputs",
    "text": "Possible outputs"
  },
  {
    "objectID": "week2/index.html#quarto-file-structure",
    "href": "week2/index.html#quarto-file-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Quarto file structure",
    "text": "Quarto file structure\nThree main components: YAML, text and R code chunks."
  },
  {
    "objectID": "week2/index.html#component-breakdown-yaml",
    "href": "week2/index.html#component-breakdown-yaml",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Component breakdown: YAML",
    "text": "Component breakdown: YAML\nMetadata is written at the top of the file, between --- in YAML.\n---\ntitle: \"ETC5513\"\nauthor: \"Michael Lydeamore\"\noutput: html_document\n---"
  },
  {
    "objectID": "week2/index.html#component-breakdown-text",
    "href": "week2/index.html#component-breakdown-text",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Component breakdown: Text",
    "text": "Component breakdown: Text\nText is written in Markdown\n# This is a section header\nThis is a section header\n## This is a subsection header\nThis is a subsection header\nIn this section, something is **important**\nIn this section, something is important"
  },
  {
    "objectID": "week2/index.html#writing-text-hyperlinks-and-sections",
    "href": "week2/index.html#writing-text-hyperlinks-and-sections",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Writing text, hyperlinks and sections",
    "text": "Writing text, hyperlinks and sections\nUsing Markdown: we can write plain text as we would do in any text processor.\n\nWe can easily add hyperlinks:\n\n\nCode:\n[More info about Quarto here](https://quarto.org)\n\nResult:\nMore info about Quarto here"
  },
  {
    "objectID": "week2/index.html#font-types",
    "href": "week2/index.html#font-types",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Font types",
    "text": "Font types\nWe can write things in italic or bold:\n\n\nCode:\n__bold__, **bold**,\n\n_italic_, *italic*\n\nResult:\nbold, bold,\nitalic, italic"
  },
  {
    "objectID": "week2/index.html#markdown-example",
    "href": "week2/index.html#markdown-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Markdown example",
    "text": "Markdown example\n\n\nCode:\n# Header 1\n## Header 2\n\n* Unordered list 1\n\n_This is italic_\n\n*So is this*\n\n**This is bold**\n\n1. Ordered list 1\n\nResult:\nHeader 1\nHeader 2\n\nUnordered list 1\n\nThis is italic\nSo is this\nThis is bold\n\nOrdered list 1"
  },
  {
    "objectID": "week2/index.html#markdown-component-code",
    "href": "week2/index.html#markdown-component-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Markdown component: code",
    "text": "Markdown component: code\nR Code is included in chunks:\n\n\nCode:\n```{r}\n#| echo: false\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n``` \n\nResult:"
  },
  {
    "objectID": "week2/index.html#r-code",
    "href": "week2/index.html#r-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R code",
    "text": "R code\n\n\nCode:\n```{r}\n#| echo: false\n\nlibrary(ggplot2)\n\ndata = data(InsectSprays)\n\nhead(InsectSprays)\n```\n...\n```{r}\n#| echo: false\nggplot(data = InsectSprays,\n       aes(x = spray,\n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\n\nResult:\n\n\n  count spray\n1    10     A\n2     7     A\n3    20     A\n4    14     A\n5    14     A\n6    12     A\n\n\n…"
  },
  {
    "objectID": "week2/index.html#r-code-chunks",
    "href": "week2/index.html#r-code-chunks",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "R Code Chunks",
    "text": "R Code Chunks\nYou can quickly insert an R code chunk into your file with:\n\nKeyboard shortcut Ctrl + Alt + I (Mac: Cmd + Option + I)\nThe Add Chunk command in the editor toolbar or\nTyping the chunk delimeters (```)\n\n\nChunk output can be customised with Chunk execution options, which are at the top of a chunk, starting with #|.\n\ninclude: false prevents code and results appearing in the finished file. The code is still run and results can be used in other chunks.\necho: false prevents code but not results appearing in the finished file. This is a useful way to embed figures."
  },
  {
    "objectID": "week2/index.html#more-chunk-options",
    "href": "week2/index.html#more-chunk-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More chunk options",
    "text": "More chunk options\n\neval: false does not evaluate (or run) this code chunk when knitting\nmessage: false prevents messages that are generated by code appearing in the finished file\nwarning: false prevents warnings that are generated appearing in the finished file\nfig.cap = \"Text\" adds a caption to a figure\nfig-align = \"center\" sets the position it will appear\n\n\nThere are loads more of these - see the Quarto documentation for a complete list."
  },
  {
    "objectID": "week2/index.html#global-options",
    "href": "week2/index.html#global-options",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Global options",
    "text": "Global options\nTo set global options that paply to every chunk in your file, call knitr::opts_chunk$set() in a code chunk.\nThese will be treated as a global default that can be overwritten by individual chunk headers.\nExample:\nknitr::opts_chunk$set(echo = FALSE)"
  },
  {
    "objectID": "week2/index.html#caching",
    "href": "week2/index.html#caching",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Caching",
    "text": "Caching\nLong documents can take a long time to run. Quarto has a caching system that can help manage this long execution time.\nYou can set cache as either a chunk option (using #|) or globally in YAML:\nexecute:\n  cache: true\nMore info on caching is in the Quarto manual\n\nUse these with care: It is easy to accidentally not refresh an updated chunk!"
  },
  {
    "objectID": "week2/index.html#example",
    "href": "week2/index.html#example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "week2/index.html#rendering-quarto-to-html",
    "href": "week2/index.html#rendering-quarto-to-html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rendering Quarto to HTML",
    "text": "Rendering Quarto to HTML\nUse the “Render” button at the top"
  },
  {
    "objectID": "week2/index.html#rendering-quarto-to-pdf",
    "href": "week2/index.html#rendering-quarto-to-pdf",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rendering Quarto to PDF",
    "text": "Rendering Quarto to PDF\nWe can also knit to a PDF:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRendering a PDF requires LaTeX installed. LaTeX is a high-quality typesetting system, and includes features designed for the production of technical and scientific documentation. We will be using the tinytex R package"
  },
  {
    "objectID": "week2/index.html#knitr-and-pandoc",
    "href": "week2/index.html#knitr-and-pandoc",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "knitr and Pandoc",
    "text": "knitr and Pandoc\n\n\n\n\n\n\n\n\nPandoc: The document converter\nhttps://pandoc.org/index.html\n\n\n\nknitr executes the code and converts the .qmd to a .md\nPandoc renders the .md to the output format you want"
  },
  {
    "objectID": "week2/index.html#lets-learn-about-yaml",
    "href": "week2/index.html#lets-learn-about-yaml",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Let’s learn about YAML",
    "text": "Let’s learn about YAML\ntitle: \"R Notebook\"\nauthor: \"Michael Lydeamore\"\nformat: \n  html:\n    toc: true\n    theme: solar\n  pdf:\n    toc: true\n  docx:\n    toc: true\ntoc: Table of contents. You can read more abotu that here"
  },
  {
    "objectID": "week2/index.html#this-is-the-resulting-html",
    "href": "week2/index.html#this-is-the-resulting-html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "This is the resulting HTML",
    "text": "This is the resulting HTML"
  },
  {
    "objectID": "week2/index.html#tables-and-captions",
    "href": "week2/index.html#tables-and-captions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tables and Captions",
    "text": "Tables and Captions\nCode:\n```{r}\nlibrary(dslabs)\ndata(murders)\ntable_data &lt;- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\nResult:\n\n\n\nGun murder data from FBI reports by state\n\n\nstate\nabb\nregion\npopulation\ntotal\n\n\n\n\nAlabama\nAL\nSouth\n4779736\n135\n\n\nAlaska\nAK\nWest\n710231\n19\n\n\nArizona\nAZ\nWest\n6392017\n232\n\n\nArkansas\nAR\nSouth\n2915918\n93\n\n\nCalifornia\nCA\nWest\n37253956\n1257"
  },
  {
    "objectID": "week2/index.html#tables-and-captions-1",
    "href": "week2/index.html#tables-and-captions-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tables and Captions",
    "text": "Tables and Captions\nCode:\n```{r}\nlibrary(dslabs)\ndata(murders)\ntable_data &lt;- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\nFor more information, type knitr::kable() into your R console."
  },
  {
    "objectID": "week2/index.html#figures-and-captions",
    "href": "week2/index.html#figures-and-captions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figures and captions",
    "text": "Figures and captions\nFigures from R are created inside code chunks.\nTypically, we will generate figures using ggplot2\nInside the code chunk, we use the fig-cap chunk option to generate a caption.\nYou will also want to include fig-label so it gets a number."
  },
  {
    "objectID": "week2/index.html#figures-and-captions-1",
    "href": "week2/index.html#figures-and-captions-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Figures and captions",
    "text": "Figures and captions\n```{r}\n#| fig-label: cars-plot\n#| fig-cap: \"Distance taken for a car to stop, against it's speed during the test.\"\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n```\n\nDistance taken for a car to stop, against it’s speed during the test."
  },
  {
    "objectID": "week2/index.html#inserting-external-imagesphotosfigures",
    "href": "week2/index.html#inserting-external-imagesphotosfigures",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Inserting external images/photos/figures",
    "text": "Inserting external images/photos/figures\nThere are two different ways to include external pictures.\n```{r}\n#| out-width: \"80%\"\nknitr::include_graphics(\"images/R.png\")\n```\nor\n![](images/R.png){width=\"80%\"}\nI recommend the latter unless for some reason you need some specific R processing.\n\nNote these don’t have to be local links. URLs work just fine!\n\n\n![](https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif)"
  },
  {
    "objectID": "week2/index.html#now-we-know-how-to-create-a-qmd-file",
    "href": "week2/index.html#now-we-know-how-to-create-a-qmd-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Now we know how to create a qmd file",
    "text": "Now we know how to create a qmd file\nBut there is more to a project than that\nA project might have:\n\nData,\nOther R or Quarto scripts\nFigures etc\n\nAll the documents related to a project should be in one folder, often under an RStudio Project."
  },
  {
    "objectID": "week2/index.html#computer-paths-1",
    "href": "week2/index.html#computer-paths-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Computer paths",
    "text": "Computer paths\n\n\n\n\n\n\nDefinition: Path\n\n\nA path is the complete location or name of where a computer file, directory, device, or web page is located\n\n\n\nSome examples:\n\nWindows: C:\\Documents\\ETC5513\nMac/Linux: /Users/Documents/ETC5513\nInternet: http://rcp.numbat.space/"
  },
  {
    "objectID": "week2/index.html#absolute-and-relative-paths",
    "href": "week2/index.html#absolute-and-relative-paths",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Absolute and Relative Paths",
    "text": "Absolute and Relative Paths\n\n\n\n\n\n\nDefinition: Absolute Path\n\n\nAn absolute or full path begins from the lowest level, typically a drive letter or root (/)\n\n\n\n\n\n\n\n\n\nDefinition: Relative Path\n\n\nA relative path refers to a location that is relative to the current directory. They typically start with a . (although this may be hidden from the user)\n\n\n\nExamples:\n\nAbsolute path: C:\\Documents\\ETC5513-Assignment-Solutions\nRelative path: ./assignment-solutions"
  },
  {
    "objectID": "week2/index.html#absolute-and-relative-paths-1",
    "href": "week2/index.html#absolute-and-relative-paths-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Absolute and Relative paths",
    "text": "Absolute and Relative paths\nAbsolute paths are generally to be avoided - it is extremely unlikely another person will have the same absolute path as you.\nRelative paths can work on different systems.\n\n\nIt is essential you understand where directories and files are within your computer\nHaving clarity about that and the projects file architecture gives you total control about their organisation."
  },
  {
    "objectID": "week2/index.html#order-versus-mess",
    "href": "week2/index.html#order-versus-mess",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Order versus mess",
    "text": "Order versus mess"
  },
  {
    "objectID": "week2/index.html#work-projects",
    "href": "week2/index.html#work-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Work projects",
    "text": "Work projects\n\nGive each project a unique working directory/folder\nClean file system: all files related to a single project should be in the same folder\n\ndata (typically a folder)\nfigures (typically a folder)\ncode\nnotes\n\nAll paths should be relative to the project folder. Why?\nRemember, absolute paths are not reproducible"
  },
  {
    "objectID": "week2/index.html#rstudio-project-example",
    "href": "week2/index.html#rstudio-project-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Project Example",
    "text": "RStudio Project Example\n\nData folder: Contains all the data for the project\nImages/Figures folder: Contains all pictures not produced by your code in the qmd file\n.Rproj file: This gets added when we create an RStudio project\nqmd file\nOther R scripts etc…"
  },
  {
    "objectID": "week2/index.html#rstudio-projects",
    "href": "week2/index.html#rstudio-projects",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio projects",
    "text": "RStudio projects\nRStudio projects automatically handle relative paths and working directories\nYou can create an RStudio project\n\nIn a brand new directory\nIn an existing directory where you already have R Code and data\nFrom a version control repository\n\nRead more on Rstudio projects here\n\n\nThey are specific to RStudio -&gt; If you use a different IDE you need a different solution"
  },
  {
    "objectID": "week2/index.html#creating-a-new-project",
    "href": "week2/index.html#creating-a-new-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a new project",
    "text": "Creating a new project\nFile &gt; New project &gt; Fill out the Options"
  },
  {
    "objectID": "week2/index.html#rstudio-project-advantages",
    "href": "week2/index.html#rstudio-project-advantages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Project Advantages",
    "text": "RStudio Project Advantages\nWhen you make a new RStudio Project, it:\n\nCreates a project file (with the .Rproj extension) within the project directory\n\nThis file can be used a as a shortcut to open the project directly\n\nCreates a hidden directory (.Rproj.user) where project-specific temporary fiels are stored\nLoads the project into RStudio and displays it’s name in the Projects toolbar"
  },
  {
    "objectID": "week2/index.html#good-coding-style-1",
    "href": "week2/index.html#good-coding-style-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good Coding Style",
    "text": "Good Coding Style\nCoding style is an opinion-based phenomenon\nThere are different styles and it is important to be careful about how you write your code.\nBad example:\n```{r}\nlibrary(ggplot2)\ndata = data(InsectSprays)\nggplot(data=InsectSprays, aes(spray, count, fill=spray))+geom_boxplot(alpha=0.6)+ggtitle(\"Insect sprays boxplots\")\n```\n\nLong lines, no spaces, no structure: makes it very hard to read and debug"
  },
  {
    "objectID": "week2/index.html#good-example",
    "href": "week2/index.html#good-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good example",
    "text": "Good example\n```{r}\nlibrary(ggplot2)\n\nggplot(data = InsectSprays,\n       aes(x = spray, \n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\nWe will (mostly) follow the Tidyverse style guide\n\nhttps://style.tidyverse.org\nhttp://adv-r.had.co.nz/Style.html"
  },
  {
    "objectID": "week2/index.html#good-coding-principles",
    "href": "week2/index.html#good-coding-principles",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Good coding principles",
    "text": "Good coding principles\n\nSource code should be readable by humans and self-explanatory\nLong sentences are not good (maximum 80-100 characters)\nInside R code chunks, the tidyverse style guide is a good guide:\n\nUse spaces around &lt;-, +, =, -, after , and before {\nFor comments inside yoru code, use #\n\n\n\n\n\n\n\n\nImportant\n\n\nThe more organised you are writing your code, the eaiser it will be to read it and debug it"
  },
  {
    "objectID": "week2/index.html#practices-for-reproducible-research",
    "href": "week2/index.html#practices-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Practices for reproducible research",
    "text": "Practices for reproducible research\n\nHave a plan to organise, store, and make your files available\nSet up an RStudio Project for each of your projects\nMake sure all the steps in your analysis are documented\nAll files should be human readable\nAll files related to a project should be explicitly tied together"
  },
  {
    "objectID": "week2/index.html#reproducible-workflow",
    "href": "week2/index.html#reproducible-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible workflow",
    "text": "Reproducible workflow"
  },
  {
    "objectID": "week2/index.html#week-2-lesson",
    "href": "week2/index.html#week-2-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 2 Lesson",
    "text": "Week 2 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nQuarto documents\nR Code Chunk Options\nIncluding figures, tables, captions\nRStudio projects\nGood Coding Practices\n\n\n\n\n\n\n\n\n\n\nResources\n\n\n\nhttps://quarto.org/\nhttps://www.markdownguide.org/getting-started/\nhttps://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects\nhttps://style.tidyverse.org\n\n\n\n\n\n\n\n\nETC5513 Week 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "This unit develops teamwork skills, through instruction on reproducibility and version control to conduct collaborative data analysis. These skills are practised in a team setting with a data analysis project."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Learning outcomes",
    "text": "Learning outcomes\n\nDevelop skills to create reproducible data analyses\nUnderstand the operation of version control systems\nUtilise versio ncontrol to integrate data analysis efforts of team members\nEffectively work with a group to construct a collaborative data story"
  },
  {
    "objectID": "index.html#teachers",
    "href": "index.html#teachers",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Teachers",
    "text": "Teachers\n\nMichael Lydeamore. Chief Examiner. Email: michael.lydeamore@monash.edu\nDavid Wu. Email: david.wu1@monash.edu\nNaveen Kaushik."
  },
  {
    "objectID": "index.html#weekly-schedule",
    "href": "index.html#weekly-schedule",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Weekly schedule",
    "text": "Weekly schedule\n\n2 hour workshop, Thursdays 10am-12pm each week\n1.5 hour tutorial, one of:\n\nTuesday 6pm-7.30pm\nWednesday 4pm-5.30pm\nWednesday 5.30pm-7pm"
  },
  {
    "objectID": "index.html#consultation",
    "href": "index.html#consultation",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Consultation",
    "text": "Consultation\n\nMichael Lydeamore: Thursday 12pm-1pm each week\n\n\n\n\nDate\nTopic\nReference\nAssessments\n\n\n\n\n26 Feb\nIntroduction to collaborative and reproducible practices\n\n\n\n\n04 Mar\nReproducible reports using Quarto\n\n\n\n\n11 Mar\nIntroduction to version control systems: git and GitHub\n\n\n\n\n18 Mar\nReproducible reporting using Quarto, git and GitHub\n\n\n\n\n25 Mar\nDeeper git knowledge, stashing and tools\n\nAssignment 1\n\n\n01 Apr\nMid-semester break\n\nAssignment 2\n\n\n08 Apr\nReproducible reporting and version control systems\n\n\n\n\n15 Apr\nWorkflows for reproducible data analysis\n\n\n\n\n22 Apr\nNo class (University Holiday)\n\n\n\n\n29 Apr\nReprodubiel reporting for specialised and broad audiences\n\nAssignment 3\n\n\n06 May\nAdvanced collaborative practices\n\n\n\n\n13 May\nReproducible workflwos in consultancy\n\n\n\n\n20 May\nCourse recap\n\n\n\n\n27 May\n\n\nInterview"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a html report using an Rmd file and explore YAML themes to define your prefer template\nPractice markdown syntax\nPractice R coding\nExplore R chunk options to customize your report template\nCreate html tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to clone a GitHub repository locally and synchronize the changes between your local and remote repositories.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment.\nThe final PDF report can not have more than 5 pages (not including the appendix).\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#objectives",
    "href": "assignments/assignment-1.html#objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Working on a reproducible Rstudio project\nProduce a html report using an Rmd file and explore YAML themes to define your prefer template\nPractice markdown syntax\nPractice R coding\nExplore R chunk options to customize your report template\nCreate html tables, add table captions and refer to them in the report text as described in Week 4\nCreate simple figures to visualize the data, add figure captions and refer to the figures in the report text as you learned in Week 4\nDemonstrate that you are able to clone a GitHub repository locally and synchronize the changes between your local and remote repositories.\nShow that you can create meaningful Git commits so that the changes and the history of the project can be recorded and tracked.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an individual assignment.\nThe final PDF report can not have more than 5 pages (not including the appendix).\nYou cannot use a dataset that has been used for another assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#part-a-setting-up-version-control",
    "href": "assignments/assignment-1.html#part-a-setting-up-version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part A: Setting up version control",
    "text": "Part A: Setting up version control\nIn this assignment, you need to create an RStudio project that will be able to produce a reproducible HTML report. For the report, please select a data set that interest you from this webpage: Our World in Data.\nThe size of the data set is not relevant, however your data must contain at least 3 numerical variables and a character or factor variable and its size must not be more than 50MB. Your reproducible report should be created using a Quarto file in Rstudio and needs to be knitted into a HTML file. The report must knit into HTML without any errors and must have have all the code and code outputs displayed (unless otherwise specified in the instructions below).\nYou will be working with a GitHub repository for this assignment. We will use GitHub Classroom, where I have set up some of the structure for you. Please join the classroom here. Make sure to choose your Monash username from the list so we can find your assignment.\n\nRepository setup (6 points)\nClone the repository created by GitHub classroom onto your computer as we have done in lectures and tutorials (1 point).\nOnce you have cloned the reposistory to your computer, make sure to add all the files in the upcoming section, and use relevant, clear commit messages (5 points).\n\n\n\n\n\n\nCaution\n\n\n\nThe GitHub repo will appear in the GitHub clasroom space. Do not work in or create a different repostiroy for this assignment.\n\n\nYou can delete the example files out of Data/ and Images/."
  },
  {
    "objectID": "assignments/assignment-1.html#part-b-creating-a-reproducible-report",
    "href": "assignments/assignment-1.html#part-b-creating-a-reproducible-report",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Part B: Creating a reproducible report",
    "text": "Part B: Creating a reproducible report\nThere is a pre-made RStudio project in the git repository. Open that with RStudio and we will work inside that project.\n\nQuarto setup (1 point)\nChange the YAML options for this Quarto file to render both a HTML and a PDF report.\n\n\nR code chunk for loading libraries (2 points)\nCreate a new Quarto file using RStudio. This file is where we will create the report for the rest of this assignment, so make sure to give it a sensible name (1 point).\nLoad all the libraries you will use in the report in an R chunk located at the beginning of your Quarto file. Make sure you set the options so that you do not display any R code, messages, or warnings in the rendered HTML document (for this chunk) (1 point).\n\n\nIntroduction section (5 points)\nUsing markdown, write a 4 sentence maximum motivation of what you are going to research and why. Make sure it is relevant to your dataset.\n\n\nResearch Question section (5 points)\nUsing markdown, discuss in 3 sentences maximum, the specific qusetion that you are going to investigate or answer in this report using your selected data.\n\n\nDataset Introduction section (5 points)\nIn this section, briefly describe your data (i.e. what the data is measuring or reocrding) in five sentences maximum using markdown. You must provide a link to the location of the data inserted in the text using markdown.\nCreate a table using the kable() function from the knitr R package to report the variable names. Add a table caption that briefly describes the table in no more than 2 sentences. Include a cross-reference to the table in your text.\n\n\nDataset Description subsection (5 points)\nCreate a subsection that will report details about your data. You must include the size of the dataset such as the number of observations, variables and variable types. You must include the following:\n\nA sentence that includes inline R code describing the number of variables and observations in your dataset.\nA screenshot of your inline R code, saved as a png file. Upload this file inside the Image folder.\nInclude that picture in your subsection. You can either use an R code chunk (with knitr::include_graphics) or markdown image syntax (![]()).\nUsing the function head(), display the first two rows of data to show the types of variables that are in the dataset (i.e. numeric, character/factor etc)."
  },
  {
    "objectID": "assignments/assignment-1.html#results-section-5-points",
    "href": "assignments/assignment-1.html#results-section-5-points",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Results section (5 points)",
    "text": "Results section (5 points)\nUsing visualisations of the data, discuss the answer to your research questions. You must:\n\nCreate 2 figurse maximum of your data that will help you answer your research question. Each figure must have a caption using the options inside the R code chunk. Create the figures using the ggplot2 package.\nUsing markdown, add a list with two bullet points describing what you see in each of the figures using italic font and how that can help you answer yoru research question. Make sure you cross-reference the figures in the text."
  },
  {
    "objectID": "assignments/assignment-1.html#marking-rubric",
    "href": "assignments/assignment-1.html#marking-rubric",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Marking Rubric",
    "text": "Marking Rubric\nIn addition to the points as described above, you will be graded on your:\n\nReport template (5 points). The default Quarto template will be granted 1 point. More sophisticated templates will add more points into this component, up to 5. Remember, styling that takes away from the report is not beneficial.\nIssues with spelling and grammar (up to -5 points).\nR code style (5 points)\nReport quality: Sections in the report are connected and aligned with the research question in a coherent way (6 points).\n\nMaximum grade: 50 points."
  },
  {
    "objectID": "assignments/assignment-1.html#the-usage-of-ai",
    "href": "assignments/assignment-1.html#the-usage-of-ai",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The usage of AI",
    "text": "The usage of AI\nYou may use Generative AI (such as ChatGPT) to correct your English or to help with your R code (for example to find bugs or ask for enhancements to your existing code). However, if you use ChatGPT you must declare it by adding a section in your Quarto report called Appendix, and display screenshots of your ChatGPT queries and interactions related to this assignment.\nYou cannot use ChatGPT to generate content for this assignment from scratch, including code.\nMonash University supports the responsible and ethical use of generative AI. For more info please refer to Monash Policy and practise guidance around acceptable and responsible use of AI technologies.\n\n\n\n\n\n\nTip\n\n\n\nRemember you can be better than chatGPT. If you just use chatGPT to create content for you, where is your value and why are your skills special?"
  },
  {
    "objectID": "assignments/assignment-1.html#assignment-submission",
    "href": "assignments/assignment-1.html#assignment-submission",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignment Submission",
    "text": "Assignment Submission\nThe report must be rendered to HTML and PDF, and all the code and code outputs must be visible. The PDF cannot have a length of more than 5 pages (excluding the appendix).\nYou do not need to upload anything to Moodle. All marking will occur directly from your GitHub repositories."
  },
  {
    "objectID": "assignments/assignment-1.html#plagiarism",
    "href": "assignments/assignment-1.html#plagiarism",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Plagiarism",
    "text": "Plagiarism\nMonash University is committed to honesty and academic integrity. There are serious consequences for plagiarism and collusion. If plagiarism and/or collusion is detected further actions will be taken according to Monash University policy and procedures. More info here:\nhttps://www.monash.edu/students/admin/policies/academic-integrity\nYou cannot re-use assignments that have been submitted or used in other units."
  },
  {
    "objectID": "week1/index.html#etc5513-title",
    "href": "week1/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nIntroduction to collaborative and reproducible practices\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 1\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week1/index.html#aim",
    "href": "week1/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "",
    "text": "Aim\n\n\n\nUnderstand the aims and structure of the unit\nExplain the need for reproducible and collaborative practices\nIntroduce the main tools that we will be using during lectures and tutorials\nGet to know your classmates"
  },
  {
    "objectID": "week1/index.html#etc5513-teaching-team",
    "href": "week1/index.html#etc5513-teaching-team",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "👩🏻‍🏫 ETC5513 Teaching Team",
    "text": "👩🏻‍🏫 ETC5513 Teaching Team\n\n\n\nDr. Michael Lydeamore\nLecturer & Chief Examiner\n\n\n\nCynthia Huang\nTutor\n\n\n\nJanith Wanniarachchi\nTutor\n\n\n\n\n\n\n\n\n\nContacting the teaching team\n\n\n\nFor private matters, contact michael.lydeamore@monash.edu using your Monash student email and citing the unit name.\nFor non-private matters, you should post this in the Moodle discussion board."
  },
  {
    "objectID": "week1/index.html#etc5513-teaching-team-1",
    "href": "week1/index.html#etc5513-teaching-team-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "👩🏻‍🏫 ETC5513 Teaching Team",
    "text": "👩🏻‍🏫 ETC5513 Teaching Team\nMost material in this course was developed by\n\n\nDr. Patricia Menendez\n\n\nPatricia is a strong believer and trailblazer in reproducible research."
  },
  {
    "objectID": "week1/index.html#etc5513-learning-objectives",
    "href": "week1/index.html#etc5513-learning-objectives",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🎯 ETC5513 Learning Objectives",
    "text": "🎯 ETC5513 Learning Objectives\n\n\n\n\n\n\nLearning objectives\n\n\n\nDevelop skills to create reproducible data analyses, reports and presentations.\nUnderstand the operation of version control systems.\nAdvance use of Git and GitHub.\nUtilize version control to integrate data analysis efforts of team members.\nEffectively work with a group to construct collaborative data science projects.\n\n\n\n\nAll that combined with the learning of statistical concepts!\n\n\n\n\n\n\n\nTip\n\n\nPlease participate during the lectures and tutorials. The success of the unit depends not only on the teaching team but also you as part of this unit’s team."
  },
  {
    "objectID": "week1/index.html#etc5513-program",
    "href": "week1/index.html#etc5513-program",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Program",
    "text": "ETC5513 Program\n\nCourse introduction to collaborative and reproducible practices\nReproducible reports using R markdown\nIntroduction to version control systems: Git and GitHub\nReproducible reporting using R markdown, Git and GitHub\nCollaborative practices requests and issues\nReproducible and collaborative practices in industry\nReproducible reporting and version control systems\nWorkflows for reproducible data analysis\nReproducible reporting for specialized and broad audiences\nAdvanced collaborative practices\nReproducible workflows in consultancy\nSummary and Recap"
  },
  {
    "objectID": "week1/index.html#etc5513-unit-structure",
    "href": "week1/index.html#etc5513-unit-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🏛️ ETC5513 unit structure",
    "text": "🏛️ ETC5513 unit structure\n\n\nStart with individual projects\n\n\n\n\n\n\nWill continue with a class group project\n\n\n\n\n\n\nFinally, you will work on yuour own projects"
  },
  {
    "objectID": "week1/index.html#unit-structure-and-resources",
    "href": "week1/index.html#unit-structure-and-resources",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Unit structure and resources",
    "text": "Unit structure and resources\n\n2 hour lectures are interactive sessions:\n\nduring the lecture we demonstrate, discuss and complete tasks in small groups\n\n1.5 hour tutorial → only go to the one you are assigned to!\n\nThe lectures will be a combination of presentations with interactive exercises."
  },
  {
    "objectID": "week1/index.html#unit-structure-and-resources-1",
    "href": "week1/index.html#unit-structure-and-resources-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Unit structure and resources",
    "text": "Unit structure and resources\nEach lecture will commence with a open frame (5 minutes), where you can talk about your learning, share comments, issues and resources with the rest of the class.\nThat time can also be used for questions (as can any other time in the lecture).\n\nThe tutorials will be entirely based on computer practicals and you will be working individually as well as in groups."
  },
  {
    "objectID": "week1/index.html#lecture-structure",
    "href": "week1/index.html#lecture-structure",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lecture structure",
    "text": "Lecture structure\n\nOpen Frame\nRecap from previous lecture\nSummary of today’s lecture content\nLecture delivery"
  },
  {
    "objectID": "week1/index.html#lecture-tips",
    "href": "week1/index.html#lecture-tips",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Lecture tips",
    "text": "Lecture tips\n\nCome prepared to be an active learner\nEngage yourself in the lecture\nShare responsibility for learning\nBring your computer"
  },
  {
    "objectID": "week1/index.html#tutorials",
    "href": "week1/index.html#tutorials",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorials",
    "text": "Tutorials\nGo over the material before the tutorial\nGoal is to practice the ideas covered in lectures by working through activies and exercises individually and in groups.\n\n\n\n\n\n\nTip\n\n\n\nYou will get instructions with the tasks that need to be completed during the tutorial\nYour tutors will be there to guide and help you through the activities\nTutorials also rpovide a great opportunity for you to discuss and work with your peers"
  },
  {
    "objectID": "week1/index.html#materials",
    "href": "week1/index.html#materials",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "🪵 Materials",
    "text": "🪵 Materials\n\n\n\n\n\n\nUnit website\n\n\n\n rcp.numbat.space\n\n\n\n\n\nLecture slides and tutorial materials are available on the unit website\nLecture videos and assessments will be available on Moodle\n\n\n\n\n\n\n\nNote\n\n\nMaterials are designed to develop your hard and soft skills."
  },
  {
    "objectID": "week1/index.html#consultation-hours",
    "href": "week1/index.html#consultation-hours",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "✋ Consultation hours",
    "text": "✋ Consultation hours\n\nMichael: Test\nTutor 1: Test\nTutor 2: Test\n\nPlease see Moodle for Zoom details"
  },
  {
    "objectID": "week1/index.html#course-assessments",
    "href": "week1/index.html#course-assessments",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "💯 Course assessments",
    "text": "💯 Course assessments\n\nWeekly quizzess: Submitted on Moodle, look under assessments: 5%\nThe quiz opens Tuesdays at 9pm and close on Thursday 5pm each week (W2-W11)\n3 Assignments:\n\nA1: Released week 3, due week 5: 15%\nA2: Released week 7, due week 9: 15%\nA3: Released week 10, due week 12: 20%\n\nOral interview: Based on A1 and W1-W12 content: Week 12: 20%"
  },
  {
    "objectID": "week1/index.html#etc5513-code-of-conduct",
    "href": "week1/index.html#etc5513-code-of-conduct",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Code of Conduct",
    "text": "ETC5513 Code of Conduct\n\nPlease feel free to ask questions and share ideas with the class.\nAll questions, suggestions or comments are welcomed and must be respected by the group.\nRemember, while working in teams, clarity, organisation and communication are extremely important\nPlease let me know about suggestions, problems and/or complaints at any time."
  },
  {
    "objectID": "week1/index.html#interactions-with-the-teaching-team",
    "href": "week1/index.html#interactions-with-the-teaching-team",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Interactions with the teaching team",
    "text": "Interactions with the teaching team\n✅ Consultation hours: We are here to help you!\n✅ Moodle discussion forum\nGet used to using the forum - helping your peers is a fantastic way to learn."
  },
  {
    "objectID": "week1/index.html#the-classic-analysis-pipeline",
    "href": "week1/index.html#the-classic-analysis-pipeline",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The classic analysis pipeline",
    "text": "The classic analysis pipeline\n\n\nYou carry out your analysis in R, Python or MATLAB (with some code), or perhaps you use Excel\nYou paste you results into your Word document or Google Doc.\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\nWhat is the problem with this approach?"
  },
  {
    "objectID": "week1/index.html#how-about",
    "href": "week1/index.html#how-about",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How about…?",
    "text": "How about…?\nIf one parameter or one number changes in your data?\n\nGAME OVER\n\n\nWe start all over again 😭😭😭\n\n\nMaybe we copy and paste into a new script\n\n\nAfter a week, a month, a year… it gets very hard to remember all the steps!"
  },
  {
    "objectID": "week1/index.html#reproducible-research-and-replicability",
    "href": "week1/index.html#reproducible-research-and-replicability",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible research and replicability",
    "text": "Reproducible research and replicability\nDefinitions by the USA National Academies of Science, Engineering and Medicine:\n\nReproducibility (“computational reproducibility”) means obtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis.\nReplicability means obtaining consistent results across studies aimed at answering the same scientific question, each of which has obtained its own data\n\nReference here: Report on reproducibility and replicability"
  },
  {
    "objectID": "week1/index.html#combining-text-and-data-analysis-in-the-same-document",
    "href": "week1/index.html#combining-text-and-data-analysis-in-the-same-document",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Combining text and data analysis in the same document",
    "text": "Combining text and data analysis in the same document\n\n\n\n\n\n\nLiterate programming\n\n\nLiterate programming is an approach to writing reports using software that weaves together the source code and text at the time of creation.\n\n\n\nDonald Knuth coined the term literate programming in the 1970s to refer to a source file that could be both run by a computer and “woven” with a formatted presentation document\n\n\nKnuth, 1992, https://www-cs-faculty.stanford.edu/~knuth/lp.html"
  },
  {
    "objectID": "week1/index.html#reproducibility",
    "href": "week1/index.html#reproducibility",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nReproducibility is a way of thinking and approaching projects\n\n\n\n\n\n\nRequires planning\nNeeds extra upfront effort\nDemands us to be organised\nChallenges us to think more broadly\n\n\n\n\n\nPhoto by Diego PH on Unsplash"
  },
  {
    "objectID": "week1/index.html#reproducible-research",
    "href": "week1/index.html#reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducible research",
    "text": "Reproducible research\n\nWorking to make your research reproducible does require extra upfront effort.\nMaking a project reproducible from the start encourages you to use better work habits.\nIt should push you to bring your data and source code up to a higher level of quality than you might if you “thought ‘no one was looking’” [Donoho, 2010, 386].\nReproducible research needs to be stored so that other researchers can actually access the data and source code.\nChanges are easier to implement especially when using dynamic reproducible documents.\nReproducible research has higher impact."
  },
  {
    "objectID": "week1/index.html#reproducibility-complexity",
    "href": "week1/index.html#reproducibility-complexity",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility complexity",
    "text": "Reproducibility complexity\nComplexity varies\nSome projects require a single tool (be that R, Python, MATLAB or many others) and may only involve one person.\nOthers might involve different teams and require many different tools"
  },
  {
    "objectID": "week1/index.html#project-example",
    "href": "week1/index.html#project-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project example",
    "text": "Project example\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "week1/index.html#complex-workflow-example",
    "href": "week1/index.html#complex-workflow-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Complex workflow example",
    "text": "Complex workflow example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.ereefs.org.au/about/"
  },
  {
    "objectID": "week1/index.html#reproducibility-how",
    "href": "week1/index.html#reproducibility-how",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Reproducibility: How?",
    "text": "Reproducibility: How?\nUsing tools for reproducible research and reporting\n\n\n\n\n\n\n\nPhoto by Todd Quackenbush on Unsplash"
  },
  {
    "objectID": "week1/index.html#dynamic-documents",
    "href": "week1/index.html#dynamic-documents",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Dynamic documents",
    "text": "Dynamic documents\n\n\n\n\n\n\nDefinition: Dynamic Documents\n\n\nA dynamic document includes code used for data analysis and report text\n\n\n\nThese two things produce your report/paper/presentation\n\nAll in a sequential and dynamic way!"
  },
  {
    "objectID": "week1/index.html#tools-for-reproducible-research",
    "href": "week1/index.html#tools-for-reproducible-research",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tools for reproducible research",
    "text": "Tools for reproducible research\nR Programming Language\n\nR enables researchers to read data, create data visualizations and run statistical analyses.\nR has thousands of libraries\nR has a very active development community that is constantly expanding.\n\nR Libraries & Packages facilitate reproducibility\n\nknitr and quarto allow us to connected R-based analyses to a presentation, papers, and report documents created with markup languages such as LaTeX and Markdown.\n\n\nR by itself has the capabilities to gather and analyse data, and with a little help from knitr and quarto, with some markup languages, present results in a way that is highly reproducible."
  },
  {
    "objectID": "week1/index.html#rstudio",
    "href": "week1/index.html#rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio",
    "text": "RStudio\nIs an integrated developer environment (IDE)\n\nWe don’t need RStudio, but it lets us do things more easily.\n\nA happy medium between R’s text-based interface and a pure GUI\nIt is closely integrated with git (version control)\n\n\nIt has a cloud counterpart called RStudio Cloud\n\n\nOther IDEs exist, mainly VSCode which is rapidly gaining popularity"
  },
  {
    "objectID": "week1/index.html#important-distinction",
    "href": "week1/index.html#important-distinction",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important distinction",
    "text": "Important distinction\nR is the programming language"
  },
  {
    "objectID": "week1/index.html#important-distinction-1",
    "href": "week1/index.html#important-distinction-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important distinction",
    "text": "Important distinction\nRStudio is the integrated development environment"
  },
  {
    "objectID": "week1/index.html#rstudio-cloud",
    "href": "week1/index.html#rstudio-cloud",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\nIt’s RStudio, in the cloud.\n\n\nWhy?"
  },
  {
    "objectID": "week1/index.html#rstudio-cloud-1",
    "href": "week1/index.html#rstudio-cloud-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "RStudio Cloud",
    "text": "RStudio Cloud\n\nAllows the users to run reproducible reports without the need of installing any additional software or configurations in their own computer. It basically looks exactly like Rstudio but it runs in the cloud and can be loaded using any browser.\n\nRstudio Cloud allows us to work in the same environment regardless the computer operating system that each of you have in your computers.\nRstudio will provide the means for us to first focus on learning R and Rstudio without having to worry about installing them locally in each computer (we’ll do that later once you are more familiar with the language and the Rstudio environment)."
  },
  {
    "objectID": "week1/index.html#version-control",
    "href": "week1/index.html#version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Version Control",
    "text": "Version Control\n\n\n\n\n\n\nDefinition: Version Control\n\n\nA system that records changes to a file or a set of files over time, so that you can recall specific versions later.\n\n\n\n\n\n\n\n\n\n\nPhoto by Marco Lermer on Unsplash"
  },
  {
    "objectID": "week1/index.html#git",
    "href": "week1/index.html#git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git",
    "text": "git\n\n\n\n\n\n\nDefinition: git\n\n\nGit is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows\n\n\n\n\n\n\n\n\n\n\nhttps://en.wikipedia.org/wiki/Git"
  },
  {
    "objectID": "week1/index.html#github-bitbucket-and-others",
    "href": "week1/index.html#github-bitbucket-and-others",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub, BitBucket, and others",
    "text": "GitHub, BitBucket, and others\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoth are cloud-based hosting services to manage git repositories\nAre code hosting platforms for version control and collaboration\n\n\n\nIt lets you and others work together on projects from anywhere"
  },
  {
    "objectID": "week1/index.html#git-and-github",
    "href": "week1/index.html#git-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git and GitHub",
    "text": "git and GitHub\n\n\n\n\n\n\n\nSource: https://blog.devmountain.com/git-vs-github-whats-the-difference/"
  },
  {
    "objectID": "week1/index.html#recomendations-summary",
    "href": "week1/index.html#recomendations-summary",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recomendations summary",
    "text": "Recomendations summary\n\n\nPlan in advance\nConsider adequate file systems for the project\nCreate accessible, connected workflows\nDocument, document, document\nConsider using a code environment container\nAdd a license for sharing your work"
  },
  {
    "objectID": "week1/index.html#etc5513-ingredients",
    "href": "week1/index.html#etc5513-ingredients",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513 Ingredients",
    "text": "ETC5513 Ingredients\n\n\n\n\n\n\n\nPhoto by Caitlin Mclean on Unsplash"
  },
  {
    "objectID": "week1/index.html#main-tools",
    "href": "week1/index.html#main-tools",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Main tools",
    "text": "Main tools\n\nR\nRStudio\nCommand Line Interface\ngit\nGitHub\nVSCode\n\n\nDuring this semester these tools will be essential for us to build reproducible and collaborative research practices."
  },
  {
    "objectID": "week1/index.html#tutorial",
    "href": "week1/index.html#tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorial",
    "text": "Tutorial\nThis week the tutorial will focus on providing an introduction to different resources.\n\nThese slides are on Moodle and the course website\nYou will also find the tutorial for this week\nFamiliarise yourself with all the resources in the tutorial and get to know your colleagues (this is quite important!)\nOverview of RStudio and an introduction to R"
  },
  {
    "objectID": "week1/index.html#week-1-lesson",
    "href": "week1/index.html#week-1-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 1 Lesson",
    "text": "Week 1 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nWhat are reproducible practices?\nWhat tools are available to us for reproducibility?\nWhen should we consider reproducible practices?\n\n\n\n\n\n\n\n\n\n\nResources\n\n\n\nLearning R: https://learnr.numbat.space\ngit manual\n\n\n\n\n\n\n\n\nETC5513 Week 1"
  },
  {
    "objectID": "week3/index.html#etc5513-title",
    "href": "week3/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nIntroduction to version control systems: git and GitHub\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 2\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week3/index.html#open-frame",
    "href": "week3/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week3/index.html#recap",
    "href": "week3/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nReproducible reporting\nQuarto documents\nR Code chunk options\nIncluding images and figures\nComputer file architechture\nR projects\nGood coding practices"
  },
  {
    "objectID": "week3/index.html#aim",
    "href": "week3/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nMotivation for version control\nGit\nIntroduction to the command line interface\nGitHub\nConnecting git and GitHub with our computer using the command line interface\nIntegration between GitHub and RStudio\nWorkflow for using version control\nAssignment 1"
  },
  {
    "objectID": "week3/index.html#project-life-different-versions",
    "href": "week3/index.html#project-life-different-versions",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Project life: Different versions",
    "text": "Project life: Different versions\n\nfile1.qmd -&gt; file2.qmd -&gt; … -&gt; file25.qmd\n\n\nWhat are the issues with this approach?"
  },
  {
    "objectID": "week3/index.html#what-are-the-issues-with-this-approach-1",
    "href": "week3/index.html#what-are-the-issues-with-this-approach-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What are the issues with this approach?",
    "text": "What are the issues with this approach?\n\nComplciated to remember what changes you made in file20.qmd\nCumbersome to compare differences between file versions\nTaking turns to collaborate on the same project and same files\nVery hard to merge file between collaborators\n\nSolution: Use version control!"
  },
  {
    "objectID": "week3/index.html#what-is-a-version-control-system",
    "href": "week3/index.html#what-is-a-version-control-system",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is a version control system?",
    "text": "What is a version control system?\n\n\n\n\n\n\nDefinition: Version Control System\n\n\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. Git manual"
  },
  {
    "objectID": "week3/index.html#version-control",
    "href": "week3/index.html#version-control",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Version control",
    "text": "Version control\nVersion control systems are a category of software tools that help store and manage changes to source code (projects) over time. They can:\n\ntrack of every modification to the source code in a special kind of database,\nallow you to roll back to previous versions if a mistake is made, and compare the code to fix the problem while minimizing disruption,\nmanage multiple versions of a project easily\n\nIt is a very useful (actually essential!) tool for collaborating and for sharing open source resources."
  },
  {
    "objectID": "week3/index.html#different-version-control-systems",
    "href": "week3/index.html#different-version-control-systems",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nLocal version control systems\n\n\nRevision control System (RCS) –&gt; keeps differences between files (time)\n\n\n\n\n\nFigure source & more info\n\n\nCopy files into another directory\nName files with time stamp\nVery hard to collaborate with others\nAll versions under the same hardware\n\n\n\nHighly prone to error\nDifficult to collaborate."
  },
  {
    "objectID": "week3/index.html#different-version-control-systems-1",
    "href": "week3/index.html#different-version-control-systems-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nCentralized version control systems (CVS) are now the standard for version control\n\n\n\n\n\n\n\nFigure source & more info\n\n\nHave a single server that contains all the versioned files\nA number of clients that check out files from that central place.\nEasier to collaborate\n\n\n\nServer issues\nEntire history of the project in a single place: You risk losing everything"
  },
  {
    "objectID": "week3/index.html#different-version-control-systems-2",
    "href": "week3/index.html#different-version-control-systems-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Different Version control Systems",
    "text": "Different Version control Systems\nDistributed version control systems\n\n\n\n\n\n\n\nFigure source & more info\n\n\nThe repository is fully mirrored, including it’s full history in various servers and/or lcoations\nIf any server malfunctions, the repositories can be restored from any of the other servers\nEvery clone is (theoretically) a full backup of all the data"
  },
  {
    "objectID": "week3/index.html#distributed-version-control-git",
    "href": "week3/index.html#distributed-version-control-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Distributed Version Control: Git",
    "text": "Distributed Version Control: Git\nWe are going to use a distributed version control called Git"
  },
  {
    "objectID": "week3/index.html#git-history",
    "href": "week3/index.html#git-history",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git history",
    "text": "Git history\nGit was created by Linus Torvalds in 2005 for development of the Linux kernel and since then many other kernel developers have been contributing to its development. The maintainer since 2005 is Junio Hamano.\nAs with most other distributed version-control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.\nGit is free and open-source software distributed under the terms of the GNU General Public License version 2.\nMore info here"
  },
  {
    "objectID": "week3/index.html#git-for-us",
    "href": "week3/index.html#git-for-us",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for us",
    "text": "Git for us\n\nA system for controlling our project versions\nA disaster recovery system\nA synchronization service\nA platform for disseminating our work\nA tool for collaboration\n…\n\nMore on Git here"
  },
  {
    "objectID": "week3/index.html#git-overview-in-a-nutshell",
    "href": "week3/index.html#git-overview-in-a-nutshell",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git overview in a nutshell",
    "text": "Git overview in a nutshell\nLet’s think of the connections between the different versions of an R project as a tree (Git tree).\n\n\n\nGit tree example\nWhite circles represent each version of the project\nWe have what we call master/main (default branch)\nWe have branches that appeared and then merged with the master"
  },
  {
    "objectID": "week3/index.html#we-need-to-learn",
    "href": "week3/index.html#we-need-to-learn",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "We need to learn",
    "text": "We need to learn\n\nHow Git operates –&gt; shell/command line\nHow to connect our R projects to a Git repo\nHow to connect our local Git repo to a Git Cloud repository (GitHub)."
  },
  {
    "objectID": "week3/index.html#command-line-interface-cli",
    "href": "week3/index.html#command-line-interface-cli",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Interface (cli)",
    "text": "Command Line Interface (cli)\n\nIn most cases (non-linux users) use a Graphical User Interface (GUI) to interact with their programs and operating systems\nHowever, at the beginning of the computing times most people would use the command line interface to interact with their computer"
  },
  {
    "objectID": "week3/index.html#git-and-command-line",
    "href": "week3/index.html#git-and-command-line",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git and Command Line",
    "text": "Git and Command Line\nWe will learn how to use the shell/command line interface\nWhy?\n\nWe will use the command line interface to interact with Git and with Github\nThe shell or command line interface is an interface where the user types commands\nThis interface allow us to control our computer using commands entered via our keyboard\nThat means that instead of using a graphical user interface (GUI) + our mouse to open and close programs, create folders and moving files, we are going to type commands"
  },
  {
    "objectID": "week3/index.html#command-line-interface",
    "href": "week3/index.html#command-line-interface",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Interface",
    "text": "Command Line Interface\nAlso known as the Shell, command line interface (cli) or terminal is an interface for typing commands to interact directly with a computer’s operating system.\n\nExamples of things that we can do from the shell or terminal:\n\nNavigating through folders and files\nCreate/delete folders\nRun and install programs (i.e interact with Git)\nAnd much more!"
  },
  {
    "objectID": "week3/index.html#terminal-in-action",
    "href": "week3/index.html#terminal-in-action",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Terminal in action",
    "text": "Terminal in action\nTypically when you open your terminal, it will welcome you with a prompt that looks like this:\npatricia@computerid-macbook:~$\nor with the new Catalina Mac OX\npatricia@computerid ~ % \nOn Windows it will contain the same elements but look like this:\npatricia@computerid-pc MINGW64 ~$"
  },
  {
    "objectID": "week3/index.html#terminal-in-practice",
    "href": "week3/index.html#terminal-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Terminal in practice",
    "text": "Terminal in practice\nWe will start writing commands after ~$ or ~% depending on the terminal version that you are using\n\nThe commands that we are going to use are the same regardless the terminal version you have."
  },
  {
    "objectID": "week3/index.html#what-is-the-path-to-my-current-computer-location",
    "href": "week3/index.html#what-is-the-path-to-my-current-computer-location",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is the path to my current computer location?",
    "text": "What is the path to my current computer location?\npwd: print working directory or present working directory\nmichael@computerid ~ % pwd\n/Users/michael/Documents/ETC5513\nUnderstanding the output of pwd command:\n/Users/michael/Documents/ETC5513\n\n/ represents the root directory\nUsers is the Users directory\nmichael refers to my directory or folder within the users directory\n…"
  },
  {
    "objectID": "week3/index.html#what-is-in-my-directory",
    "href": "week3/index.html#what-is-in-my-directory",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "WHat is in my directory?",
    "text": "WHat is in my directory?\nls lists the files inside the current directory\nmichael@computerid Documents~ % ls Documents\nCourses Research Teaching file.pdf example.txt\n\nDocuments is an argument to the ls command.\nls gives you a list of all the elements in a directory\nls -a list of all the files including hidden ones\n\nEach Linux command (pwd,ls …) have lots of options (flags) that can be added.\nA reference list of unix commands with options might be found here"
  },
  {
    "objectID": "week3/index.html#command-line-basics-navigating-between-directories",
    "href": "week3/index.html#command-line-basics-navigating-between-directories",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Command Line Basics: Navigating between directories",
    "text": "Command Line Basics: Navigating between directories\ncd: Change directory\n\nFirst we need to make sure where we are (pwd).\nThe cd command syntax is very simple, we just need to specify the directory that we want to navigate to\nAt any moment of your navigation, you can use the pwd command to confirm your current location\nA path that starts with / is assumed to be absolute."
  },
  {
    "objectID": "week3/index.html#cd-in-practice",
    "href": "week3/index.html#cd-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "cd in practice!",
    "text": "cd in practice!\nMy current location is Documents. I want to get to Documents/Research/COVID\n\ncd Research means that we move into Research\ncd COVID means that we move into COVID\n. means the current directory COVID\ncd .. means (parent directory) that we move back into Documents\nThe ~ symbol is a shorthand for the user’s home directory and we can use it to form paths:\n\nIf you are in your Downloads directory (/Users/John/Downloads) typing cd ~ will bring you to your Home directory /Users/John!"
  },
  {
    "objectID": "week3/index.html#more-commands-practice",
    "href": "week3/index.html#more-commands-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More commands practice!",
    "text": "More commands practice!\nMy current location is COVID, or really Documents/Research/COVID\n\n.. is shorthand for the parent of the current working directory\ncd .. means that we move into Research (1 directory up). That is from COVID back to Research\ncd ../../ means that we move up two directories: from COVID to Documents\nmkdir Project1 Project2 means “make two new directories (folders) called Project1 and Project2”."
  },
  {
    "objectID": "week3/index.html#more-commands-practice-1",
    "href": "week3/index.html#more-commands-practice-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More commands practice!",
    "text": "More commands practice!\n\nmv move files or folders: takes two arguments, the first being files or folders to move and the second being the path to move to.\ncp this command is used to copy files or group of files or directories. When copy files we need to use cp -r to copy all the directory contents.\nrm remove files and folders\nTo remove entire folders rm requires the -r (recursive) flag\nWe can create empty files with touch example.qmd"
  },
  {
    "objectID": "week3/index.html#cheat-sheet-for-command-line",
    "href": "week3/index.html#cheat-sheet-for-command-line",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Cheat sheet for command line",
    "text": "Cheat sheet for command line\nExcellent summary about the commands that we will be using can be found here.\nPlease read and practice 1-5 sections once you have installed your command line interface/terminal/Git Bash Shell\n\nSee next slides for instructions about how to install your command line interface/terminal/Git Bash Shell.\n\nYou don’t need to learn all linux commands only those that we are going to use!"
  },
  {
    "objectID": "week3/index.html#installing-the-command-line-interface-and-git",
    "href": "week3/index.html#installing-the-command-line-interface-and-git",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Installing the command line interface and Git",
    "text": "Installing the command line interface and Git"
  },
  {
    "objectID": "week3/index.html#git-for-windows",
    "href": "week3/index.html#git-for-windows",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Windows",
    "text": "Git for Windows\n\nPlease follow the tutorial here. This tutorial teach you step by step how to install Git and the command line interface in your Windows system.\nIf you following the steps above you will get Git install in your computer as well as Git Bash Shell which is the terminal that you will be using if you are a Windows user."
  },
  {
    "objectID": "week3/index.html#git-for-mac",
    "href": "week3/index.html#git-for-mac",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Mac",
    "text": "Git for Mac\n\nGo to Applications folder, open Utilities, double-click on Terminal\nOr open a Finder Window and search for “Terminal”\n\nOnce you have found the terminal:\nOpen your Terminal and check if you have Git installed:\n\nBy typing in your terminal git version\nIf Git is installed you will see something like\ngit version 2.20.1 (Apple Git-117)"
  },
  {
    "objectID": "week3/index.html#git-for-mac-1",
    "href": "week3/index.html#git-for-mac-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Mac",
    "text": "Git for Mac\nIf Git is not installed in your Mac:\n\nType in your terminal brew install git\nAlternatively you can install Git from here"
  },
  {
    "objectID": "week3/index.html#git-for-linux",
    "href": "week3/index.html#git-for-linux",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git for Linux",
    "text": "Git for Linux\n\nCheck if you have Git installed: Type git version in your terminal.\nIf Git is installed you will see something like: git version 2.20.1\n\nIf Git is not installed:\n\nType in your terminal: sudo apt-get install git"
  },
  {
    "objectID": "week3/index.html#prior-to-the-tutorial",
    "href": "week3/index.html#prior-to-the-tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Prior to the tutorial:",
    "text": "Prior to the tutorial:\n\nFor Windows users please install Git and the command line interface (Git Bash Shell) following the installation instructions.\nFor Mac and Linux users please make sure you have Git installed and you know where to find your terminal (Mac users –&gt; Applications &gt; Utilities &gt; Terminal), and if not installed, please follow the instructions to install it.\n\nIf you have any problems with the installation please make use of the consultation hours to get some help\nAlso remember that in Moodle you have the Forum for discussion where you can talk to each other, share tricks and resources. Please make use of it!"
  },
  {
    "objectID": "week3/index.html#git-recap",
    "href": "week3/index.html#git-recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git recap",
    "text": "Git recap\n\nTracking all the changes to a project\nAllows you to go back and forth between versions\nCheck files history\nTag specific versions for quick referencing\nReview changes made by collaborators in the project\nCreate project branches that allow you to work on the project without interfering with the master project\nMerging branches to master project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface"
  },
  {
    "objectID": "week3/index.html#how-does-git-work",
    "href": "week3/index.html#how-does-git-work",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "How does Git work?",
    "text": "How does Git work?\nWe have learned that Git is a distributed version control system.\nBut how does it actually work?\n\nGit works with snapshots of miniature files systems not with differences\nEvery time you save files in your project, Git takes a picture of what all your files look like at that moment and stores a reference to that snapshot.\nIf files have not changed, Git does not store the file again.\nIf a file has no change, Git stores a link to the previous identical file that it has already stored in the repository history."
  },
  {
    "objectID": "week3/index.html#snapshots-database",
    "href": "week3/index.html#snapshots-database",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Snapshots (Database)",
    "text": "Snapshots (Database)\n\n\n\n\n\n\n\nIllustration source Begining Git and Github"
  },
  {
    "objectID": "week3/index.html#git-tree-and-snapshots-database",
    "href": "week3/index.html#git-tree-and-snapshots-database",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git tree and Snapshots (Database)",
    "text": "Git tree and Snapshots (Database)\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach version corresponds to one of the dots on the git tree."
  },
  {
    "objectID": "week3/index.html#files-in-a-git-repository",
    "href": "week3/index.html#files-in-a-git-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Files in a Git repository",
    "text": "Files in a Git repository\nThe states in a Git repository are: the working directory, the staging area (index) and the git directory:\n\nThe working directory is the current snapshot that you are working on.\nThe staging area (index) is where modified files are marked in their current version ready to be stored in the database (i.e. the index of changes).\nThe git directory is the database where the history is stored\n\nIn your file system you will see the folder and the files of your project\nMore info: Begining Git and Github"
  },
  {
    "objectID": "week3/index.html#components-of-a-git-repository-visually",
    "href": "week3/index.html#components-of-a-git-repository-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Components of a Git repository: Visually",
    "text": "Components of a Git repository: Visually"
  },
  {
    "objectID": "week3/index.html#three-git-states",
    "href": "week3/index.html#three-git-states",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Three Git States",
    "text": "Three Git States\nGit has three main states that your files can reside in: modified, staged, and committed:\n\nModified: you have changed the file but have not committed it to your repository database yet.\nStaged: you have marked a modified file in its current version to go into your next commit snapshot.\nCommitted: the data is safely stored in your local database.\n\nThis leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.\nThese actions occur in your local repository and allow you to create your Git tree!"
  },
  {
    "objectID": "week3/index.html#three-git-states-visually",
    "href": "week3/index.html#three-git-states-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Three Git States Visually",
    "text": "Three Git States Visually\n\n\n\n\n\n\n\nFigure source"
  },
  {
    "objectID": "week3/index.html#local-git-repo-and-remote-git-repository",
    "href": "week3/index.html#local-git-repo-and-remote-git-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Local Git repo and remote Git repository",
    "text": "Local Git repo and remote Git repository"
  },
  {
    "objectID": "week3/index.html#github-is-our-remote-repository",
    "href": "week3/index.html#github-is-our-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository\n\n\nGitHub is an interface and cloud hosting service built on top of the Git version control system.\nGit does the version control and Github stores the data remotely.\nGitHub makes your projects accessible on a fully feature project website\n\nMore info about Github here"
  },
  {
    "objectID": "week3/index.html#sign-up-for-a-github-free-account",
    "href": "week3/index.html#sign-up-for-a-github-free-account",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Sign up for a GitHub free account",
    "text": "Sign up for a GitHub free account\nHere you can sign up for a free GitHub account. Please use your Monash email address to create it before the tutorial this week.\nIf you already have a GitHub account and want to keep them all together, you can add another email to your current account."
  },
  {
    "objectID": "week3/index.html#git-repo-and-a-remote-repository",
    "href": "week3/index.html#git-repo-and-a-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git repo and a remote repository",
    "text": "Git repo and a remote repository"
  },
  {
    "objectID": "week3/index.html#github-is-our-remote-repository-1",
    "href": "week3/index.html#github-is-our-remote-repository-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub is our remote repository",
    "text": "GitHub is our remote repository"
  },
  {
    "objectID": "week3/index.html#collaborative",
    "href": "week3/index.html#collaborative",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Collaborative",
    "text": "Collaborative"
  },
  {
    "objectID": "week3/index.html#from-github-to-our-computer",
    "href": "week3/index.html#from-github-to-our-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "From GitHub <–> to our computer",
    "text": "From GitHub &lt;–&gt; to our computer\n\nCreate a repository (repo) on https://www.github.com\nClone this GitHub repository into our computer: making a “local copy”\nWork on our local copy of the repo\nStage and Commit changes to local repository\nPush those changes into the remote repo in GitHub.\nPull changes from the remote repo to our local repository.\n\nOur goal is to have both our local and remote repositories synchronized\nLet’s look at all these in more detail!"
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github",
    "href": "week3/index.html#creating-a-repo-on-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub\n\n\n\nLogin into GitHub\nClick the ‘+’ icon on the top right on the menu bar and select ‘New Repository’."
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github-1",
    "href": "week3/index.html#creating-a-repo-on-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub\nImportant:\n\nRepo name\nVisibility: public or private\nMake sure it is initialized with README.md: It is important to have a README.md file for every repository. GitHub will use this file as the “presentation” of the repository and should briefly describe what the repo is about."
  },
  {
    "objectID": "week3/index.html#creating-a-repo-on-github-2",
    "href": "week3/index.html#creating-a-repo-on-github-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a repo on GitHub",
    "text": "Creating a repo on GitHub"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-using-the-terminal",
    "href": "week3/index.html#configuring-git-in-your-rstudio-using-the-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio using the terminal",
    "text": "Configuring Git in your Rstudio using the terminal\nFirst open your command line interface/Terminal/Git Bash Shell:"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-project",
    "href": "week3/index.html#configuring-git-in-your-rstudio-project",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio project",
    "text": "Configuring Git in your Rstudio project\nFirst of all we need to get your Git configured in Rstudio (the same follows for your own computer):\nOpen your command line interface/Terminal/Git Bash Shell and type:\n\ngit config --global user.email \"your.email@example.com\"\ngit config --global user.name  \"Your_Firstname Lastname\"\n\nMake sure you use the same email address for this and for setting up your GitHub account.\nTo check that everything is set up correctly, type the following in the CLI:\ngit config --global user.email and git config --global user.email"
  },
  {
    "objectID": "week3/index.html#configuring-git-in-your-rstudio-cloud-project-using-the-r-console",
    "href": "week3/index.html#configuring-git-in-your-rstudio-cloud-project-using-the-r-console",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuring Git in your Rstudio Cloud project using the R console",
    "text": "Configuring Git in your Rstudio Cloud project using the R console\nAlternatively you could type the following in your R console inside Rstudio:\n```{r}\ninstall.packages(usethis)\n\nlibrary(usethis)\n\nusethis::use_git_config(user.name = \"Your Name Surname\",\n                        user.email = \"Your monash email\")\n```"
  },
  {
    "objectID": "week3/index.html#getting-a-remote-repository",
    "href": "week3/index.html#getting-a-remote-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Getting a remote repository",
    "text": "Getting a remote repository\n\n\nGrabs remote repository from a server/cloud (i.e github)\nCreates a new folder (copy of the remote repository) in our computer"
  },
  {
    "objectID": "week3/index.html#cloning-a-github-repo",
    "href": "week3/index.html#cloning-a-github-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Cloning a github repo",
    "text": "Cloning a github repo\nWhen you create a repository on GitHub, it exists as a remote repository.\nUsers can clone your repository to create a local copy on their own computer and sync between the two locations.\n\nMore detailed info here"
  },
  {
    "objectID": "week3/index.html#adding-an-shh-key-into-your-github",
    "href": "week3/index.html#adding-an-shh-key-into-your-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Adding an SHH key into your GitHub",
    "text": "Adding an SHH key into your GitHub\nIn the tutorial you will learn how to add an SSH key into your workflow:\n\nWhen working with a Git repository you will be required to identify yourself to GitHub using your username and password each time to do a commit!.\nAn SSH key is an alternative way to identify yourself that does not require you to enter you username and password every time\nSSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer or in your Rstudio Cloud project.\nIf the keys match, you’re granted access!\n\nMore info here and here"
  },
  {
    "objectID": "week3/index.html#from-github-into-our-computer",
    "href": "week3/index.html#from-github-into-our-computer",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "From Github into our computer",
    "text": "From Github into our computer\n\nFrom our shell or command line: 1. Navigate to the computer location where we want to download the github repo 2. git clone git@github.com:okayama1/Git_demo.git 3. This will create a folder in your computer with the github repository files and folders"
  },
  {
    "objectID": "week3/index.html#git-workflow",
    "href": "week3/index.html#git-workflow",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git Workflow",
    "text": "Git Workflow\n\nExample:\n\nWe modified a qmd file from the working directory\nWe add the modified files to the staging area to be stored: git add\nWe move the files from the staging area into the git directory (git commit) capturing a snapshot\nWe connect with the remote repository git push and update files"
  },
  {
    "objectID": "week3/index.html#tracked-and-untracked-files",
    "href": "week3/index.html#tracked-and-untracked-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tracked and untracked files",
    "text": "Tracked and untracked files\n\nIn a git repository tracked files are those which are part of the git repository\nHowever, we can also have untracked files for which their history is not tracked\nTracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.\nUntracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.\n\nWe will learn more about this in the coming weeks.\nBut if you want some early reading, have a look here"
  },
  {
    "objectID": "week3/index.html#recap-from-clone-to-first-commit",
    "href": "week3/index.html#recap-from-clone-to-first-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap: From clone to first commit",
    "text": "Recap: From clone to first commit\n\ngit clone \"remote repo address\" is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository in your local computer.\ngit add filename is a Git command that adds a change in the working directory to the staging area.\ngit commit -m \"Message\": The Git commit command captures a snapshot of the project’s currently staged changes. (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\ngit push origin master (or main): The git push command is used to upload local repository content to a remote repository, in this case to the master (or main) branch."
  },
  {
    "objectID": "week3/index.html#github-workflow-visual-example",
    "href": "week3/index.html#github-workflow-visual-example",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "GitHub Workflow: Visual example",
    "text": "GitHub Workflow: Visual example\n\n\n\n\n\n\n\nClone pulls from the GitHub repo\n\n\n\n\n\n\nWorking in your computer and updating the remote repo in GitHub"
  },
  {
    "objectID": "week3/index.html#general-workflow-via-terminal",
    "href": "week3/index.html#general-workflow-via-terminal",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "General Workflow (via Terminal)",
    "text": "General Workflow (via Terminal)\nYou typically clone a repo only once. After that each time you work on your repo you will use the following Git commands:\n\ngit pull origin \"branch name\" is used to fetch and download content from a remote repository (after the repo has been cloned) and immediately update the local repository to match that content.\ngit status displays the state of the working directory and the staging area\ngit add file_name adds changes in the working directory to the staging area\ngit commit -m \"Message\" is used to create a snapshot of the staged changes along a timeline of a Git project history\ngit push origin \"branch name\" command is used to upload the local repository content to a remote repository in GitHub"
  },
  {
    "objectID": "week3/index.html#commit-messages",
    "href": "week3/index.html#commit-messages",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commit messages",
    "text": "Commit messages\nWe can write our commit messages like this:\ngit commit -m \"Message\"\nAlternatively, we can also use an external editor. This is useful when we want to create extended commits and if we forget to use git commit -m and we type git commit\n\nOur external editor of choice is VSCode."
  },
  {
    "objectID": "week3/index.html#installing-vs-code",
    "href": "week3/index.html#installing-vs-code",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Installing VS code",
    "text": "Installing VS code\nInstall VSCode here.\nThen set VSCode as follows:\n\nSource here."
  },
  {
    "objectID": "week3/index.html#after-installing-vscode",
    "href": "week3/index.html#after-installing-vscode",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "After installing VSCode",
    "text": "After installing VSCode\nWe need to set VS code as the editor for Git by typing the following in the command line interface/Terminal/Git Bash Shell:\ngit config --global core.editor \"code --wait\"\nYou can check if this has worked by committing without using -m by just typing in your cli git commit.\nThen the VS Code editor will open and you can write your commit directly there.\n\nIf you are a Windows user and this does not work for you, you might need to set up your VSCode path manually."
  },
  {
    "objectID": "week3/index.html#git-learning-process",
    "href": "week3/index.html#git-learning-process",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Git Learning Process",
    "text": "Git Learning Process\nFirst of all, learn to manage your own projects on GitHub: get familiar with committing, pushing and pulling.\n\nCreate repos on GitHub first\nAlways initialize repos with README\nClone the repo to your local directory and start adding files and folders!\nData (will go into the data folder)\n\nFor larger files, data can be stored in Googledrive\nwe will also learn how to store large files in GitHub\n\nCommit/Push often.\nSync across all your workstations."
  },
  {
    "objectID": "week3/index.html#rstudio-and-github",
    "href": "week3/index.html#rstudio-and-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nThe status/staging panel in Rstudio"
  },
  {
    "objectID": "week3/index.html#rstudio-and-github-1",
    "href": "week3/index.html#rstudio-and-github-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Rstudio and GitHub",
    "text": "Rstudio and GitHub\nRStudio keeps git constantly scanning the project directory to find any files that have changed or which are new.\n\nBy clicking a file’s little “check-box” you can stage it."
  },
  {
    "objectID": "week3/index.html#understanding-the-symbols-in-the-rstudio-git-panel",
    "href": "week3/index.html#understanding-the-symbols-in-the-rstudio-git-panel",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Understanding the symbols in the Rstudio Git panel",
    "text": "Understanding the symbols in the Rstudio Git panel\n\nBlue-M: a file that is already under version control that has been modified.\nOrange-?: a file that is not under version control (yet…)\nGreen-A: a file that was not under version control, but which has been staged to be committed.\nRed-D: a file under version control has been deleted. To make it really disappear, you have to stage its disappearance and commit.\nPurple-R: a file that was renamed. (Note that git in Rstudio seems to be figuring this out on its own.)"
  },
  {
    "objectID": "week3/index.html#configuration",
    "href": "week3/index.html#configuration",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Configuration",
    "text": "Configuration\nThe Diff window shows what has changed between the last committed version of a file and its current state.\n\n\n\n\n\n\n\nNote: all this output is available from the command line too, but the Rstudio interface is very nice!"
  },
  {
    "objectID": "week3/index.html#making-a-commit",
    "href": "week3/index.html#making-a-commit",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Making a Commit",
    "text": "Making a Commit\nSuper easy: - After staging the files you want to commit… - Write a brief message (first line short, then as much after that as you want) and hit the commit button."
  },
  {
    "objectID": "week3/index.html#the-history-window",
    "href": "week3/index.html#the-history-window",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "The History window",
    "text": "The History window\nAllow us to understand past commits.\n\nEasy inspection past commits.\nSee what changes were made at each commit."
  },
  {
    "objectID": "week3/index.html#important",
    "href": "week3/index.html#important",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Important:",
    "text": "Important:\n\nWe can interact between Git, GitHub and our local repository using the terminal only\nWe can interact between Git, GitHub and our local repository using Rstudio\n\nIn this unit you must learn how to use Git via the command line interface/Terminal/Git Bash shell as that is the universal way of using git and it will be very useful for using with any programming language."
  },
  {
    "objectID": "week3/index.html#to-do-before-the-tutorial",
    "href": "week3/index.html#to-do-before-the-tutorial",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "To do before the tutorial",
    "text": "To do before the tutorial\n\nCreate a GitHub account\nInstall Git and the command line interface in your computers (please see info on previous slides)\nMake sure you read again all this material\nPlease watch the tutorial video before before the tutorial\nComplete the online quiz"
  },
  {
    "objectID": "week3/index.html#assignment-1",
    "href": "week3/index.html#assignment-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Assignment 1",
    "text": "Assignment 1\nAssignment 1 will be released on Wednesday of this week (Week 3)\nIt will be due at 11:55pm on Thursday, March 30th (Week 5)."
  },
  {
    "objectID": "week3/index.html#week-3-lesson",
    "href": "week3/index.html#week-3-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 3 Lesson",
    "text": "Week 3 Lesson\n\n\n\n\n\n\nSummary\n\n\n\nMotivation for version control\nGit\nIntroduction to command line\nGithub\nIntegration between Github and Rstudio\nWorkflow for using version control\n\n\n\n\n\n\n\n\nETC5513 Week 3"
  },
  {
    "objectID": "week5/index.html#etc5513-title",
    "href": "week5/index.html#etc5513-title",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "ETC5513: Reproducible and Collaborative Practices",
    "text": "ETC5513: Reproducible and Collaborative Practices\nDeeper git knowledge, stashing and tools\nLecturer: Michael Lydeamore\nDepartment of Econometrics and Business Statistics\n\n\n\n\nmichael.lydeamore@monash.edu\n\n\n Week 5\n\n\nrcp.numbat.space"
  },
  {
    "objectID": "week5/index.html#open-frame",
    "href": "week5/index.html#open-frame",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Open Frame",
    "text": "Open Frame"
  },
  {
    "objectID": "week5/index.html#recap",
    "href": "week5/index.html#recap",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Recap",
    "text": "Recap\n\nLearned more on creating reproducible reports:\n\nReferencing\nTalk about css files\n\nMore on Git:\n\nBranches\n\nSolving Git merging conflicts\nInstall VSCode as a GUI to work with Git/GitHub and as a text editor for commits."
  },
  {
    "objectID": "week5/index.html#aim",
    "href": "week5/index.html#aim",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Today’s plan",
    "text": "Today’s plan\n\n\n\n\n\n\nAim\n\n\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode\n\n\n\n\nWith this you have learned the basics to create reproducible and collaborative reports."
  },
  {
    "objectID": "week5/index.html#stashing",
    "href": "week5/index.html#stashing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Stashing",
    "text": "Stashing\n“Stashing takes the”dirty” state of your working directory - that is, your modified tracked files and staged changes - and saves it on a stack of unfinished changes that you can reapply at any time (even on a different branch).” Source\ngit stash comes in handy for staged files or `git stash -u for unstaged files.\ngit stash allow us to keep changes in our local repository and to commit then later on.\ngit stash save \"Message\" allow us to add a message to the stash"
  },
  {
    "objectID": "week5/index.html#git-stash",
    "href": "week5/index.html#git-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash",
    "text": "git stash\nCreating a stash allows you to revert but save changes that you might have done in the repository, without losing them.\nThen, when you are ready to include those changes and to commit them into the remote repo we can use:\n\ngit stash apply makes your changes in the stash on the branch but keeps them in the stash.\ngit stash pop makes your changes in the stash on the branch and removes them from the stash.\n\nGenerally, pop is preferred unless you have to apply your changes more than once."
  },
  {
    "objectID": "week5/index.html#git-stash-in-practice",
    "href": "week5/index.html#git-stash-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash in practice",
    "text": "git stash in practice\n$ git status\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\n$ git stash\nSaved working directory and index state WIP on master: \n5002d47 our new homepage\nHEAD is now at 5002d47 our new homepage"
  },
  {
    "objectID": "week5/index.html#git-status-changes-after-stashing",
    "href": "week5/index.html#git-status-changes-after-stashing",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git status changes after stashing",
    "text": "git status changes after stashing\n$ git status\nOn branch master\nnothing to commit, working tree clean"
  },
  {
    "objectID": "week5/index.html#while-your-changes-are-stashed-you-can",
    "href": "week5/index.html#while-your-changes-are-stashed-you-can",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "While your changes are stashed you can …",
    "text": "While your changes are stashed you can …\n\nMake more changes into the repo, create new commits, switch branches and perform any other Git operations.\nYou can come back to your stash later on and re-apply your stash when you’re ready.\nStash is local to your repository.\n\n\n\n\n\n\n\nImportant\n\n\nstashes are not transferred to the server when you push.\n\n\n\nYou can create more than one stash: be careful with this."
  },
  {
    "objectID": "week5/index.html#git-apply-and-git-pop-stage-changes",
    "href": "week5/index.html#git-apply-and-git-pop-stage-changes",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git apply and git pop: stage changes",
    "text": "git apply and git pop: stage changes\nThe git stash command takes your uncommitted changes but staged and saves them away for later use, or git stash -u if we have not staged the changes, and then reverts them from your working copy. git stash save “Message to remember what you did”\nTo bring stash in from the repo:\n\ngit stash apply\ngit stash pop"
  },
  {
    "objectID": "week5/index.html#git-stash-apply",
    "href": "week5/index.html#git-stash-apply",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash apply",
    "text": "git stash apply\ngit stash apply will take the changes saved in your stash and apply them into the working directory of your current branch. In addition, the changes are kept in the stash. This might be useful when you want to apply the same changes into different branches."
  },
  {
    "objectID": "week5/index.html#git-stash-pop",
    "href": "week5/index.html#git-stash-pop",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash pop",
    "text": "git stash pop\ngit stash pop will do the same as apply but will delete the stash after applying the changes.\n\n\n\n\n\n\nImportant\n\n\nThe stash is not a replacement for a commit. You can think of stashing as ‘keeping for later’, while a commit is for saving and keeping record."
  },
  {
    "objectID": "week5/index.html#git-stash-pop-in-practice",
    "href": "week5/index.html#git-stash-pop-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash pop in practice",
    "text": "git stash pop in practice\n$ git status\nOn branch master\nnothing to commit, working tree clean\n$ git stash pop\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\nDropped refs/stash@{0} (32b3aa1d185dfe6d57b3c3cc3)"
  },
  {
    "objectID": "week5/index.html#git-stash-apply-in-practice",
    "href": "week5/index.html#git-stash-apply-in-practice",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "git stash apply in practice",
    "text": "git stash apply in practice\ngit stash apply\nOn branch master\nChanges to be committed:\nnew file: style.css\nChanges not staged for commit:\nmodified: index.html\n\nDo you see the difference between pop and apply?"
  },
  {
    "objectID": "week5/index.html#more-than-one-stash",
    "href": "week5/index.html#more-than-one-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "More than one stash",
    "text": "More than one stash\ngit stash list will list all of your stashes\n$ git stash list\nstash@{0}: WIP on dev: 1f6f8bb Commit message A\nstash@{1}: WIP on master: 50cf63b Commit message B\n\ngit stash show stash@{1} will show you the files changed in stash@{1}\nThen you can call git stash apply/pop twice\nOr git stash apply stash@{0}\nOr git stash pop stash@{1}"
  },
  {
    "objectID": "week5/index.html#deleting-stash",
    "href": "week5/index.html#deleting-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Deleting stash",
    "text": "Deleting stash\n\ngit stash drop stash@{0} will delete stash@{0}\ngit stash clear will remove all the stashes in the stash area.\n\n\n\n\n\n\n\nImportant\n\n\nBecause stashes aren’t synchronised, once they’re gone they’re gone. So, clear with caution."
  },
  {
    "objectID": "week5/index.html#creating-a-branch-from-a-stash",
    "href": "week5/index.html#creating-a-branch-from-a-stash",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a branch from a stash",
    "text": "Creating a branch from a stash\nIf you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work. If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.\nIf you want an easier way to test the stashed changes again, you can run git stash branch branchname, which creates a new branch for you with your selected branch name, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully."
  },
  {
    "objectID": "week5/index.html#tracked-untracked-and-ignored-files",
    "href": "week5/index.html#tracked-untracked-and-ignored-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tracked, untracked and ignored files",
    "text": "Tracked, untracked and ignored files\nGit sees every file in your working copy as one of three things:\n\ntracked: a file which has been previously staged or committed\nuntracked: a file which has not been staged or committed or\nignored: a file which Git has been explicitly told to ignore.\n\nTypically in a project there might be files that we decided to not track and ignore.\nExamples include files that are built artifacts and machine generated files that can be derived from your repository source or should otherwise not be committed."
  },
  {
    "objectID": "week5/index.html#in-rstudio",
    "href": "week5/index.html#in-rstudio",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In Rstudio",
    "text": "In Rstudio\n\nBlue-M: a file that is already under version control that has been modified.\nOrange-?: a file that is not under version control (yet…).\nGreen-A: a file that was not under version control, but which has been staged to be committed\nRed-D: a file under version control has been deleted. To make it really disappear, you have to staged its disappearance and commit.\nPurple-R: a file that was renamed. (Note that git in Rstudio seems to be figuring this out on its own.)"
  },
  {
    "objectID": "week5/index.html#gitignore",
    "href": "week5/index.html#gitignore",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": ".gitignore",
    "text": ".gitignore\nIgnored files are tracked in a special file named .gitignore that is checked in at the root of your repository.\n\nThere is no explicit git ignore command: instead Git uses a .gitignore file which must be edited and committed by hand when you have new files that you wish to ignore.\n.gitignore files contain special patterns which are comapred against filenames to determine whether or not they should be ignored."
  },
  {
    "objectID": "week5/index.html#example-of-gitignore-patterns",
    "href": "week5/index.html#example-of-gitignore-patterns",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of gitignore patterns",
    "text": "Example of gitignore patterns\n\nSource here"
  },
  {
    "objectID": "week5/index.html#gitignore-file",
    "href": "week5/index.html#gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": ".gitignore file",
    "text": ".gitignore file\n\nYou can use the characters as those in the table\nYou can also add comments inside your file using .green[#]\n\n# ignore all logs\n*.log\n# History files\n.Rhistory\n.Rapp.history\n# Session Data files\n.RData\n# User-specific files\n.Ruserdata\n# Example code in package build process\n*-Ex.R"
  },
  {
    "objectID": "week5/index.html#example-of-a-gitignore-file",
    "href": "week5/index.html#example-of-a-gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of a gitignore file",
    "text": "Example of a gitignore file\n\nSource here"
  },
  {
    "objectID": "week5/index.html#creating-a-gitignore-file",
    "href": "week5/index.html#creating-a-gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a gitignore file",
    "text": "Creating a gitignore file\n\n\nFrom the command line you can create a .gitignore file for your repository.\ntouch .gitignore\nYou can edit the file using Rstudio or VSCode.\nYou can also create a .gitignore file from GitHub.\n\nYou can edit it later using RStudio or VSCode."
  },
  {
    "objectID": "week5/index.html#creating-a-.gitignore-file",
    "href": "week5/index.html#creating-a-.gitignore-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating a .gitignore file",
    "text": "Creating a .gitignore file\nIf you want to ignore a file that is already checked in, you have to untrack it before you add it to the .gitignore.\nDo to this, from your terminal/Git Bash Shell:\n$ git rm --cached FILENAME\nThe gitignore file specifies intentionally untracked files to ignore.\nEach line in a gitignore file specifies a pattern."
  },
  {
    "objectID": "week5/index.html#example-of-a-gitignore-file-1",
    "href": "week5/index.html#example-of-a-gitignore-file-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Example of a gitignore file",
    "text": "Example of a gitignore file\n\nSource here"
  },
  {
    "objectID": "week5/index.html#your-branch-is-ahead-of-originmaster-by-1-commits",
    "href": "week5/index.html#your-branch-is-ahead-of-originmaster-by-1-commits",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Your branch is ahead of ‘origin/master’ by 1 commits",
    "text": "Your branch is ahead of ‘origin/master’ by 1 commits\n\nThis message means that your local repository has one commit that hasn’t been pushed yet.\nIf you push without committing, nothing gets pushed.\nIf you commit without adding, nothing gets committed.\nIf you add without committing, nothing at all happens, git merely remembers that the changes you added should be considered for the following commit.\n\n\n\n\n\n\n\nTip\n\n\ngit add and git commit are local operations.\ngit push, git pull, and git fetch are operations that interact with a remote repository."
  },
  {
    "objectID": "week5/index.html#why-do-we-fork-a-repository",
    "href": "week5/index.html#why-do-we-fork-a-repository",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Why do we fork a repository?",
    "text": "Why do we fork a repository?\nA fork is a copy of a repository.\n\nForking a repository allows you to freely experiment with changes without affecting the original project.\nMost commonly, forks are used to either propose changes to someone else project or to use someone else project as a starting point for your own project.0\n\nMore info here"
  },
  {
    "objectID": "week5/index.html#forking-a-repo-in-github",
    "href": "week5/index.html#forking-a-repo-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forking a repo in GitHub",
    "text": "Forking a repo in GitHub\nSearch/navigate repo from within our Github account."
  },
  {
    "objectID": "week5/index.html#forked-repo",
    "href": "week5/index.html#forked-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forked repo",
    "text": "Forked repo"
  },
  {
    "objectID": "week5/index.html#our-repos-in-github",
    "href": "week5/index.html#our-repos-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Our repos in GitHub",
    "text": "Our repos in GitHub"
  },
  {
    "objectID": "week5/index.html#differences-between-forking-and-cloning-a-repo",
    "href": "week5/index.html#differences-between-forking-and-cloning-a-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Differences between forking and cloning a repo",
    "text": "Differences between forking and cloning a repo\n\nA fork is a copy of someone else GitHub repository, saved to your own GitHub. It allows you to experiment with changes without affecting the original project.\nA fork acts as a bridge between the original repository and your personal one.\nIt will also allow you to interact between your forked copy and the original repo.\n\n\n\nWhen you clone a GitHub repository, you are creating a local copy of that repo on your computer.\nThat allows you to work on that repo locally and sync between both your local repo and your remote repo, but you cannot interact with the original repo if it’s owned by someone else."
  },
  {
    "objectID": "week5/index.html#what-is-a-pull-request",
    "href": "week5/index.html#what-is-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What is a Pull request?",
    "text": "What is a Pull request?\n\nWe use GitHub to share our code and projects with others.\nThere are situations when another person makes changes into your code and wants you to consider those changes, for example fixing a bug or adding new examples\n\nTo do this, the other person can make a pull request. This makes a request to the repositories owner to pull or merge these changes into the original repository."
  },
  {
    "objectID": "week5/index.html#pull-request-visually",
    "href": "week5/index.html#pull-request-visually",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request visually",
    "text": "Pull request visually"
  },
  {
    "objectID": "week5/index.html#forked-repo-1",
    "href": "week5/index.html#forked-repo-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Forked repo",
    "text": "Forked repo"
  },
  {
    "objectID": "week5/index.html#modified-forked-repo-for-pull-request",
    "href": "week5/index.html#modified-forked-repo-for-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Modified forked repo for pull request",
    "text": "Modified forked repo for pull request"
  },
  {
    "objectID": "week5/index.html#create-a-pull-request-to-the-original-repo",
    "href": "week5/index.html#create-a-pull-request-to-the-original-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Create a pull request to the original repo",
    "text": "Create a pull request to the original repo"
  },
  {
    "objectID": "week5/index.html#what-happens-when-you-start-a-pull-request",
    "href": "week5/index.html#what-happens-when-you-start-a-pull-request",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What happens when you start a pull request",
    "text": "What happens when you start a pull request"
  },
  {
    "objectID": "week5/index.html#pull-request-from-etc5513demo-to-okayama1",
    "href": "week5/index.html#pull-request-from-etc5513demo-to-okayama1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request from ETC5513demo to okayama1",
    "text": "Pull request from ETC5513demo to okayama1"
  },
  {
    "objectID": "week5/index.html#pull-request-to-okayama1-owner-of-original-repo",
    "href": "week5/index.html#pull-request-to-okayama1-owner-of-original-repo",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request to okayama1 (owner of original repo)",
    "text": "Pull request to okayama1 (owner of original repo)"
  },
  {
    "objectID": "week5/index.html#pull-request-email-to-okayama1",
    "href": "week5/index.html#pull-request-email-to-okayama1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request email to okayama1",
    "text": "Pull request email to okayama1"
  },
  {
    "objectID": "week5/index.html#pull-request-okayama1-github-inbox",
    "href": "week5/index.html#pull-request-okayama1-github-inbox",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Pull request okayama1 GitHub Inbox",
    "text": "Pull request okayama1 GitHub Inbox"
  },
  {
    "objectID": "week5/index.html#opening-vscode",
    "href": "week5/index.html#opening-vscode",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Opening VSCode",
    "text": "Opening VSCode"
  },
  {
    "objectID": "week5/index.html#editing-the-readme.md-file",
    "href": "week5/index.html#editing-the-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Editing the README.md file",
    "text": "Editing the README.md file"
  },
  {
    "objectID": "week5/index.html#staged-the-changes-readme.md-file",
    "href": "week5/index.html#staged-the-changes-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Staged the changes README.md file",
    "text": "Staged the changes README.md file"
  },
  {
    "objectID": "week5/index.html#commit-the-changes-readme.md-file",
    "href": "week5/index.html#commit-the-changes-readme.md-file",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Commit the changes README.md file",
    "text": "Commit the changes README.md file"
  },
  {
    "objectID": "week5/index.html#visualizing-all-the-files",
    "href": "week5/index.html#visualizing-all-the-files",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Visualizing all the files",
    "text": "Visualizing all the files"
  },
  {
    "objectID": "week5/index.html#creating-new-branch",
    "href": "week5/index.html#creating-new-branch",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Creating new branch",
    "text": "Creating new branch"
  },
  {
    "objectID": "week5/index.html#in-the-meantime-in-github",
    "href": "week5/index.html#in-the-meantime-in-github",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "In the meantime in GitHub",
    "text": "In the meantime in GitHub"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts",
    "href": "week5/index.html#resolving-conflicts",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-1",
    "href": "week5/index.html#resolving-conflicts-1",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-2",
    "href": "week5/index.html#resolving-conflicts-2",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#resolving-conflicts-3",
    "href": "week5/index.html#resolving-conflicts-3",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Resolving conflicts",
    "text": "Resolving conflicts"
  },
  {
    "objectID": "week5/index.html#what-you-should-know-by-now",
    "href": "week5/index.html#what-you-should-know-by-now",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "What you should know by now?",
    "text": "What you should know by now?\n\nCrate reproducible simple html reports.\nCreate figures and tables using R code chunks\nReference figures, tables and sections\nConnect your reproducible reports to Git and GitHub (version control)\nWork on a reproducible project using Rstudio, Git and GitHub\nCreate and merge branches\nBeing able to solve merging conflicts\nForking repos in GitHub\nInteract with others using pull requests on GitHub\nBasic operations with VSCode."
  },
  {
    "objectID": "week5/index.html#tutorial-and-next-lecture",
    "href": "week5/index.html#tutorial-and-next-lecture",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Tutorial and Next Lecture",
    "text": "Tutorial and Next Lecture\nNext week we will discuss the importance of reproducible reporting and the usage of version control systems. We will do few hands on exercises so please make sure you bring your computer to the lecture.\n\nTutorial this week you will start working in pairs.\nYou will continue working in pairs in Week 6 too.\nIn Week 6, we’ll keep of practicing all the things that we have learned so far.\nThis week and next will provide great opportunities for you to practice all the tools that we have learned so far!"
  },
  {
    "objectID": "week5/index.html#week-5-lesson",
    "href": "week5/index.html#week-5-lesson",
    "title": "ETC5513: Collaborative and Reproducible Practices",
    "section": "Week 5 Lesson",
    "text": "Week 5 Lesson\n\n\n\n\n\n\nRecap\n\n\n\nMore Git/GitHub tools\nPull requests: a tool to collaborate with others via GitHub\nVSCode\n\n\n\n\n\n\n\n\nETC5513 Week 5"
  }
]