---
title: 'ETC5513: Collaborative and Reproducible Practices'
subtitle: "Tutorial 2"
author: "Michael Lydeamore"
date: today
format:
    unilur-html:
        output-file: index.html
        embed-resources: true
    unilur-html+solution:
        output-file: solution.html
        embed-resources: true
---

```{r, echo = FALSE, eval = file.exists("tutorial.css")}
htmltools::includeCSS("tutorial.css")
knitr::opts_chunk$set(echo=TRUE)
```

## `r emo::ji("target")` Objectives

-   Working on a reproducible RStudio Project
-   Working on a HTML report and example different YAML themes
-   Practice Markdown syntax
-   Practice R
-   Practice R chunk options
-   Gain experience on data wrangling using the `tidyverse` suite of packages
-   Producing exploratory data analysis figures using the package `ggplot2`
-   Learn how to add figure captions
-   Create HTML tables and learn how to add captions


## Exercise 1: Hands on practice with COVID-19 Data

1.  The data for the tutorial is inside a folder called `data`, which is bundled with the RStudio Project you made int he workshop. Find that file in the lower right pane where all your files are listed.
2.  Create a new section heading in your `qmd` document to read the data with the title "Reading Avian Influenza Data"\
    Hint: Use `#`
3.  Inside this new section, create an R Code Chunk with options `echo: true`, `warning: false`, `message: false` called "Reading data" and insert the following code:\

``` r
dat <- read_csv("data/avian_influenza_numbers.csv")
```

4.  Insert a new R Chunk and find out what information you can get from the command `head(dat)`
5.  Modify the `head` command to display 10 rows.
6.  Create another two R chunks and use in each of them the R functions `glimpse()` and `str()`. What information can you get from those commands?
    Hint: For more information on R functions, type in the R conolse `?glimpse()`.
7.  Using an R inline command, write the dimension of the dataset in a sentence.\
    Hint: Have a look at `ncol` and `nrow`.
8.  Add a new subsection heading (`###`) with "Why is it important to know the dimension of your dataset?" and write a brief sentence with the explanation
9.  Add a new subsection heading (`###`) with "What are the variable names in the dataset?" and display the names of the dataset variables using R.\
    Hint: `?names()` in the R consolee
10. Select two variables and use a markdown list to briefly explain what each of the variables are measuring.

::: unilur-solution
2.  The R chunk should look like this:

```` verbatim
# Reading data

```{{r loading_data}}
#| echo: true
#| warning: false
#| message: false

dat <- read_csv("data/avian_influenza_numbers.csv")
```
````

4.  `head(dat)` will print the top five rows of the dataset.
5.  `head(dat, n=10)`
6.  `glimpse` prints the columns as rows, and the data across the screen. It shows the first view values and the type (class) of each column. `str` is similar but shows you detailed information about the dataframe object (as opposd to just the data).

```{r}
#| echo: false

library(readr)

dat <- read_csv("data/avian_influenza_numbers.csv")
```

```{r}
library(dplyr)
glimpse(dat)
```

```{r}
str(dat)
```

and for good measure

```{r}
head(dat, n=10)
```

7.  Code example:\

```{verbatim}
The dataset has `r nrow(dat)` rows and `r ncol(dat)` variables.
```

Output: The dataset has `r nrow(dat)` rows and `r ncol(dat)` variables.

8.  Example markdown:

````{verbatim}
### Why is it important to know the dimension of your dataset?
It is important because it will help you to better understand the 
structure of your data set. It will provide a clear information
about how many variables and how many individual cases  are 
in your data.

### What are the variable names in the dataset?
```{{r}}
names(dat)
```
````

Output: 

* `Range`: Contains a range of years. Class `character`. 
* `Month`: Month of the data, format is m/d/y. Class `character`.
* Remaining columns: Country of case. Class `double`.

### Why is it important to know the dimension of your dataset?

It is important because it will help you to better understand the structure of your data set. It will provide a clear information about how many variables and how many individual cases are in your data.

### What are the variable names in the dataset?

```{r}
names(dat)
```
:::

## Exercise 4: COVID19 Data Wrangling

1.  Using the R package `dplyr` (which is loaded with `tidyverse`), and using the pipe (`|>`), create a new dataset called `data_cleaned` that only contains the following variables:
    -   `Month`
    -   `Australia`
    -   `Egypt`
    -   `United States`
    
```{r}
#| unilur-solution: true
#| echo: true
data_cleaned <- dat |>
    select(Month, Australia, Egypt, `United States`)
```

2.  Inspect `data_cleaned` and describe using a markdown list the type of variables in this new dataset. Write the names of the variables in bold. Do you think the variable attributes are correct?

::: unilur-solution
```{verbatim}
* `Month` is a character (`<chr>`)
* `Australia`, `Egypt` and `United States` are character (`<chr>`)
```

We would expect `Month` to be a date
:::

3.  Convert the variable `date` into a date vector using `lubridate::mdy`. What do you notice?

::: unilur-solution
Let's put it in a new object

```{r}
#| echo: true
data_monthly <- data_cleaned |>
    mutate(monthdate = lubridate::mdy(Month))
```

There are some missing values. If we filter by these,

```{r}
#| echo: true

data_monthly |> filter(is.na(monthdate))
```

We see it seems to be aggregated data that is `NA`, so we can safely ignore them.

```{r}
#| echo: true

data_monthly <- data_monthly |> filter(!is.na(monthdate))
```

:::

5.  Remove cases for which the data is aggregated or doesn't have a valid month.

::: unilur-solution
```{r}
#| echo: true

data_monthly <- data_monthly |> filter(!is.na(monthdate))
```
:::

6.  What is the dimension of this new data set? Compare it with the dimension of `cleaned_data`. How many cases have we lost?

::: unilur-solution
```{r}
#| echo: true
dim(data_monthly)
dim(data_cleaned)
```

We have lost `r nrow(data_cleaned)-nrow(data_monthly)` cases for which we did not have information about age or gender.
:::

9.  Provide a table summary of the three countries using the `kable()` function from the `kableExtra` package. Give it the caption "Summary of number of cases of Avian Influenza".

::: unilur-solution
```{r}
#| echo: true

library(knitr)
data_monthly |>
    select(Egypt, Australia, `United States`) |>
    summary() |>
    kable(caption = "COVID-19 Age Summary")
```
:::

10. Visualize the case counts using a histogram and give an explanation about the information that a histogram convey. In addition change the x label in the plot to *Age* and remove the y axis label.\
    Hint: As a first step, do this for just one country. To do multiple countries at once, you will need to `pivot_longer` your dataset.

::: unilur-solution
```{r}
#| echo: true

library(ggplot2)
data_monthly |>
    ggplot(aes(x=Egypt)) +
    geom_histogram(binwidth = 5) +
    labs(x="Case counts in Egypt", y="")
```

```{r}
#| echo: true

library(ggplot2)
data_monthly |>
    # Drop the old month column
    select(!Month) |>
    # Pivot everything except monthdate
    pivot_longer(!monthdate) |>
    ggplot(aes(x=value, fill = name)) +
    geom_histogram(binwidth = 5, position = "dodge") +
    labs(x="Case counts of Avian Influenza", y="")
```
:::

11. _Extension_: Change this plot to a time series plot, with one bar per month. As an extra challenge, split this out into three separate plots - one per country.

::: {.unilur-solution}
```{r}
#| echo: true

data_monthly |>
    # Drop the old month column
    select(!Month) |>
    # Pivot everything except monthdate
    pivot_longer(!monthdate) |>
    ggplot(aes(x=monthdate, y = value, fill = name)) +
    geom_col() +
    facet_wrap(~name, scales="free") +
    labs(x="Case counts of Avian Influenza", y="")
```
:::

::: {.callout-important}

At the end of this tutorial, you should have a full QMD file that renders, including your code and the outputs from it. This means you can read it from top to bottom and remember what you did.
:::
