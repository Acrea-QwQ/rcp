---
pagetitle: "ETC5513: Reproducible and Collaborative Practices"
subtitle: "Workflows for reproducible data analysis"
author: "Michael Lydeamore"
email: "michael.lydeamore@monash.edu"
date: "Week 10"
department: "Department of Econometrics and Business Statistics"
unit-url: "rcp.numbat.space"
footer: "ETC5513 Week 10"
format: 
  revealjs:
    logo: images/monash-stacked-blue-rgb-transparent.png
    slide-number: c
    multiplex: false
    theme: ../assets/monash.scss
    show-slide-number: all
    show-notes: false
    controls: true
    width: 1280
    height: 750
    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]
    include-after-body: "../assets/after-body.html"
    chalkboard:
      boardmarker-width: 5
      buttons: true
execute:
  echo: true
---


```{r, include = FALSE}
current_file <- knitr::current_input()
basename <- gsub(".[Rq]md$", "", current_file)

knitr::opts_chunk$set(
  fig.path = sprintf("images/%s/", basename),
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  out.width = "100%",
  fig.retina = 3,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  cache = TRUE,
  cache.path = "cache/"
)
```

## <br>[`r rmarkdown::metadata$pagetitle`]{.monash-blue .title} {#etc5513-title background-image="images/bg-01.png"}

### `r rmarkdown::metadata$subtitle`

Lecturer: *`r rmarkdown::metadata$author`*

`r rmarkdown::metadata$department`

::: tl
<br>

<ul class="fa-ul">

<li>

[<i class="fas fa-envelope"></i>]{.fa-li}`r rmarkdown::metadata$email`

</li>

<li>

[<i class="fas fa-calendar-alt"></i>]{.fa-li} `r rmarkdown::metadata$date`

</li>

<li>

[<i class="fa-solid fa-globe"></i>]{.fa-li}<a href="`r rmarkdown::metadata[["unit-url"]]`">`r rmarkdown::metadata[["unit-url"]]`</a>

</li>

</ul>

<br>
:::

## Open Frame

![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align="center"}

## Recap

* Learn how to add references and bibliography
* Dealing with large files
* Tags
* GitHub issues

## Today's plan {#aim}

::: {.callout-important}

## Aim

* Create a `git` project from an existing local folder
* Licensing a repository
* Lightweight dependency management
* Advanced collaborative practices
* GitHub notes
* Other GitHub features
* Templates for slides

:::

## Adding version control onto an existing project

Suppose you have a folder on your computer which is not version controlled, and you decide that you would like to start tracking it.

You go to GitHub and create a repo over there. You now have two options:

::: {.columns}
::: {.column width='50%'}
::: {.fragment}

#### Approach 1:

* Create a GitHub repo
* Clone the repo locally
* Move all the files and folders from your existing project into this folder
* Stage, commit, push

:::
:::
::: {.column width='50%'}
::: {.fragment}
#### Approach 2:

* Open a terminal in the directory for your folder
* `git init` to create a `git` repostiroy
* Stage, commit
* `git remote add origin git@github.com:...`
* `git push -u origin main`
:::

:::
:::

## Adding version control onto an existing project

Option 2 is preferred because it [reduces duplication]{.monash-green2}.

GitHub even gives you instructions:

![](images/init.png){fig-align="center"}

::: {.fragment}
The `-u` flag says to link remote `origin` to branch `main`. it is a one time operation.
:::

::: {.fragment}
Remember you can verify your remotes using `git remote -v`
:::

# Demo

## Repository Visibility

![](images/reposvisibility.png){fig-align="center"}

[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility)

## Licensing

Public repos in GitHub make your work publicly available and therefore it is important to establish how your work should be acknowledged if someone else wants to use it.

> Public repositories on GitHub are often used to share open source software. For your repository to be truly open source, you'll need to license it sot that others are free to use, change and distribute the software.

[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository)

## Available licenses in GitHub

![](images/githubli.png){fig-align="center"}

[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#detecting-a-license)

## Choosing a license

![](images/chooselicense.png){fig-align="center"}

[Source here](https://choosealicense.com/)

## License examples

::: {.columns}
::: {.column width='50%'}
![](images/ggplotlog.png){fig-align="center"}

:::
::: {.column width='50%'}
![](images/forecastlogo.png){fig-align="center"}

:::
:::

## No license

![](images/no-permission.png){fig-align="center"}

[Source here](https://choosealicense.com/)

## Creative Commons License

![](images/cclicenses.png){fig-align="center"}

## Creative Commons License

![](images/ccl.png){fig-align="center"}

[More info here](https://en.wikipedia.org/wiki/Creative_Commons_license)

## Location of your license

You can add a license from:

* GitHub when you first create a repo
* Later by placing your license text in a file named [LICENSE.md]{.monash-green2}

::: {.fragment}
Licenses go in the _root_ of the directory. Some information about licenses is sometimes included in `README.md` as well, but this is not required.

[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#detecting-a-license)
:::

# Demo

# Making sure your code is transportable

It used to work I'm sure!

## Think about the following issue

* My code ran 6 months ago ([I'm sure it did]{.monash-blue}) and now it is not working.
* My figures in `ggplot` look funny now

::: {.fragment}
Generally, this is because a version of a package has updated.
:::

## Package environments

![](https://imgs.xkcd.com/comics/python_environment.png){fig-align="center"}

## Lightweight dependency management

The primary solution for dependency management (which is far from perfect) is `renv`

![](images/renvlogo.png){fig-align="center"}

The idea is to create a [project-specific]{.monash-green2} library to ensure a project has a record of which version of R packages are used.

## Week 9 Lesson

::: {.callout-important}
* Learn how to add references and bibliography
* Dealing with large files
* Tags
* GitHub issues
:::
