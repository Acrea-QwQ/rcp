---
title: 'ETC5513: Collaborative and Reproducible Practices'
subtitle: "Tutorial 10"
author: "Michael Lydeamore"
date: today
format:
    unilur-html:
        output-file: index.html
        embed-resources: true
    unilur-html+solution:
        output-file: solution.html
        embed-resources: true
---
```{r, echo = FALSE, eval = file.exists("tutorial.css")}
htmltools::includeCSS("tutorial.css")
```


## `r emo::ji("target")` Objectives

* Learn to use `git lfs` to deal with large files
* Create licenses in our repostiroies
* Use `renv` to create a local library

## Setting up licensed repositories

For this week's tutorial, you'll need a brand new repository to work in. It can be public or private.

1. Create a new repository with your choice of name. Ensure that it has a **license**, a **`.gitignore`** file and a **`README`** file.  
You should select these from the repo creation menu, not by committing them yourself later.

2. Clone the repository to your local machine

3. Change the license file to a different one. Remember you can find licenses on [choosealicense.com](https://www.choosealicense.com). Stage, commit and push your changes.

4. _Revert_ the commit you just made.

::: {.unilur-solution}
`git revert HEAD~0`

You don't need the `HEAD~0` to revert the most recent commit.
:::

5. _Reset_ the last two commits. You should end up with your original license file back on the repo.

::: {.unilur-solution}
`git reset HEAD~2`
:::

6. Commit, stage and push your changes (if there are any). What do you notice?

::: {.unilur-solution}
Any evidence of the license change has been removed from the repository. This is known as a _destructive_ operation.
:::

7. Edit the `README.md` file to include your name. Stage and commit (but don't push).

8. _Amend_ the most recent commit to also include the course code and the tutorial number. Include an _expanded_ commit message for the amended commit.

::: {.unilur-solution}
`git commit --amend` should open your text editor.

To include an expanded commit message, leave a blank line between the summary and expanded text.
:::

9. Push your changes. Can you see the expanded commit message on GitHub?

## Lightweight dependency management using `renv`

Inside your repo from the previous section:

1. Create a qmd file that has a libraries code chunk, and load the `dplyr` and `ggplot2` libraries.

2. Stage the changes, commit and push.

3. What are the library paths for this project?

::: {.unilur-solution}
```
.libPaths()
"/Library/Frameworks/R.framework/Versions/4.0/Resources/library"
```
:::

4. Install the `renv` package

5. Initialise `renv` in your R seession

::: {.unilur-solution}
`renv::init()`
:::

6. What new files or folders have been made in your repo with this command?

::: {.unilur-solution}
There is a new folder called `renv`, a new file called `.Rprofile` and a new filed called `renv.lock`.
:::

7. Using the terminal, use `cd` and `ls` to find the new files.

8. In the terminal, check the status of your repo.

::: {.unilur-solution}
![](../images/renv_init_files.png){fig-align="center"}
:::

9. Create a snapshot of your repostiory using `renv::snapshot()`

10. Check the status of your repo, stage, commit and push the changes into the remote repository.

::: {.unilur-solution}
```
git status
git add .
git commit -m "Adding renv files for dependency management"
git push origin main
```
:::

**Extension:** Try adding a development package from GitHub, such as the [`naniar`](https://github.com/njtierney/naniar) package. Follow the `renv` workflow. Does the package get recorded? Can you see it in the lockfile? How is it recorded differently from packages on CRAN?




