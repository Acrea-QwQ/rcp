---
title: 'ETC5513: Collaborative and Reproducible Practices'
subtitle: "Tutorial 3"
author: "Michael Lydeamore"
date: today
format:
    unilur-html:
        output-file: index.html
        embed-resources: true
    unilur-html+solution:
        output-file: solution.html
        embed-resources: true
---


```{r, echo = FALSE, eval = file.exists("tutorial.css")}
htmltools::includeCSS("tutorial.css")
```


## `r emo::ji("target")` Objectives

* Get familiar with the command line interface
* Set up `git` on your local machine
* Configure `git`
* Clone your first repository
* Modify your first repository with the command line interface
* Learn `git` flow using RStudio

## Exercise 1: Continuing practicing `git` commands

In the workshop, you created a repository caslled "Tutorial3". You also made an RStudio Project inside this repository. Open that project in RStudio before you start.

1. Inside your README file create a new section as follows:  "This is a section". Observe in the top right pane of your Rstudio how the status for the file README.md in the staging is changed to M after you modified the file in the top right pane of your Rstudio window.

::: {.unilur-solution}
```
# This is a new section
```
:::

7. Now we are going to do a commit using Rstudio: Select the check box next to the file README.md in the staging area within your Rstudio and click:

- Commit 
- Write a message in the commit window "This is my first commit" in the window that pops up
- Commit
- Push (you will be prompt to insert your GitHub credentials one last time. After that you will be able to commit and push without having to insert your GitHub credentials! )

::: {.callout-tip collapse="true"}
## Hint

![](../images/staggingarea1.png){fig-align="center"}
:::
    
8. Open your GitHub, go to Tutorial3 project and make sure your README.md file has been updated.

9. Look at the commits history.

## Exercise 2: Command line interface & `git`

Here, we will use your Terminal/command line interface/Gitbash to interact between your local repository and your remote repository 

1. Continue working in the Rstudio Project that you created in the previous exercise. Inside your Rstudio project, copy the `qmd` file we made in Week 2 over to this directory.

::: {.callout-tip}
You can do this either in your file explorer, or for an extra challenge, using the terminal.
:::

2. Do the same process with the `data` folder from Week 2.
 
3. Now we are going to use your Terminal/command line interface/Gitbash to commit the changes using the  directly. Please type the following in your Terminal/command line interface/Gitbash:

- `git add .` (or `git add *` to commit all the changes)
- `git commit -m "Adding folder data"`
- `git push origin main`
    
4. General workflow to interact with GitHub using the Terminal: 

-  `git clone` (A repository is typically clone only one time from the remote repository)
-  `git pull` (The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content. You should do this every time you star working in your local repository)
-  `git status` (The git status command displays the state of the working directory and the staging area)
-  `git add <file_name>` (The git add command adds a change in the working directory to the staging area)
-  `git add * ` (Will commit all the changes)
-  `git commit -m "Message" `(`m` = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)
-  `git push origin <branch_name>` (The `git push` command is used to upload local repository content to a remote repository. )
  