---
title: 'ETC5513: Collaborative and Reproducible Practices'
subtitle: "Tutorial 11"
author: "Michael Lydeamore"
date: today
format:
    unilur-html:
        output-file: index.html
        embed-resources: true
    unilur-html+solution:
        output-file: solution.html
        embed-resources: true
---
```{r, echo = FALSE, eval = file.exists("tutorial.css")}
htmltools::includeCSS("tutorial.css")
```


## `r emo::ji("target")` Objectives

* Recap moving through git repositories
* Practice undoing and resetting commits

## Moving back in time: finding our way in a Git repo

1. How can we explore old commits?

::: {.unilur-solution}
`git log --oneline`
:::

2. How are the commits identified?

::: {.unilur-solution}
They are identified with a unique SHA or SHA1 number.
:::

3. Fork the following repo: [https://github.com/github/explore](https://github.com/github/explore). Clone the repo locally.
   
4. Using your terminal look at the commits. How can you go up and down over the commits? How can you get out of the list?

::: {.unilur-solution}
You can move up and down by pressing `u` or `d`. To exit, press `q`.
:::

5. List the commits that have been done in the repo since 1 May 2020 only.

::: {.unilur-solution}
`git log --since=01-05-2020`
:::

6. Open the local project in VSCode and have a look at the tree history and the commit messages. Specially have a look at longer commits that contain not only one line but also some more text.

7. Where is the repo HEAD?

8. Using the command line interface or terminal move the HEAD of the repository to the commit a82635e

::: {.unilur-solution}
`git checkout a82635e`
:::

9. What is the commit first line of commit a82635e?

::: {.unilur-solution}
Fix CI/rubocop / build
:::

10. Which files have been modified in that commit?   

::: {.unilur-solution}
![](../images/modified_files.png){fig-align="center"}
:::

11. What is the difference between commit a82635e and the previous commit?

::: {.unilur-solution}
First, `git log a82635e` to find the SHA of the previous commits. Then, `git diff 108a0c92a9caa7 HEAD`

![](../images/diff2.png){fig-align="center"}

12. Move the HEAD of the repository back to where was originally located (last commit of the main (or master) branch)

::: {.unilur-solution}
`git checkout main`
:::

13. Find the commit with message "add in lite" what was change in the modified file?  

::: {.unilur-solution}
`git log --grep="add in lite"`
:::

14. Move back to the latest commit in the main (or master) branch of the repo so that you can keep making commits without being in a detached HEAD.
  
15. Using your terminal add a new file "myexample.txt" in the repo, stage, commit and push the file to **your** remote repo

::: {.unilur-solution}
![](../images/com2.png){fig-align="center"}

:::

16. Let's add another file same as above now called "myexample2.txt". **Stage** the file and then **unstage** the file.

::: {.unilur-solution}
```
git status
git add .
```

To unstage, `git reset`.
:::

17. Stage "myexample2.txt", commit and push it to the remote repository. 

18. You realized that you made a mistake and you want to undo 17. You don't want to remove the commit from the history. How can you do that?

::: {.unilur-solution}
`git revert SHA`
:::

19. Run a git log --oneline  and have a look at the commit that you did before the last commit.

20. Pick the commit that you did before the last commit and do git reset SHA. What happens?

::: {.unilur-solution}
```
git status
git log
git reset SHA
```

You will see that the last commit has disappeared from the repo history.
:::